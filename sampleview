{
    "incorporationCertNo": "INC123456789",
    "incorporationRegisteredAddress": "123 Business Street, Patna, Bihar",
    "dateOfIncorporation": "2015-08-20",
    "udyogAadhaarNo": "UADHAR123456",
    "udyogAadhaarRegDate": "2020-05-10",
    "enterpriseType": {
        "id": 56,
        "code": "Micro",
        "label": "Micro"
    },
    "epfNo": "EPF123456789",
    "epfRegisterAuthority": "EPF Regional Office Bihar",
    "esicNo": "ESIC987654321",
    "esicAuthority": "ESIC Patna",
    "turnoverFY1": "300000000",
    "turnoverFY2": "280000000",
    "turnoverFY3": "250000000",
    "turnoverGreater250Cr": false,
    "payroll": null,
    "pfReturn3Mon": null,
    "documents": [
        {
            "docTypeId": 6,
            "docTypeName": "Turnover Documents FY1",
            "filename": "4_Turnover_Documents_FY1_4c08d788-ec62-46cc-a57f-a60028f482b9.pdf",
            "originalFilename": "udyog_aadhaar.pdf"
        },
        {
            "docTypeId": 14,
            "docTypeName": "Turnover Documents FY2",
            "filename": "4_Turnover_Documents_FY2_44038037-6f4d-423b-8c56-c348370a8bb2.pdf",
            "originalFilename": "udyog_aadhaar.pdf"
        },
        {
            "docTypeId": 4,
            "docTypeName": "Certificate of Incorporation",
            "filename": "4_Certificate_of_Incorporation_254108d9-1c51-4b1c-89b7-a11e6a34613e.pdf",
            "originalFilename": "udyog_aadhaar.pdf"
        },
        {
            "docTypeId": 5,
            "docTypeName": "Udyog Aadhaar Certificate",
            "filename": "4_Udyog_Aadhaar_Certificate_9691227c-8835-4b18-9f83-5dfb3d44f995.pdf",
            "originalFilename": "Declaration_HoD (3).pdf"
        },
        {
            "docTypeId": 12,
            "docTypeName": "GST",
            "filename": "4_GST_f39bed89-c957-4bd1-a6f2-c9ac6cc6d28f.pdf",
            "originalFilename": "DeclarationHoD.pdf"
        },
        {
            "docTypeId": 2,
            "docTypeName": "EPF Certificate",
            "filename": "4_EPF_Certificate_cad09088-b032-40d3-a882-82dc7ae9c2b0.pdf",
            "originalFilename": "udyog_aadhaar.pdf"
        },
        {
            "docTypeId": 15,
            "docTypeName": "Turnover Documents FY3",
            "filename": "4_Turnover_Documents_FY3_096df72f-cd16-4853-af23-12750b8a739b.pdf",
            "originalFilename": "udyog_aadhaar.pdf"
        },
        {
            "docTypeId": 1,
            "docTypeName": "ESIC Certificate",
            "filename": "4_ESIC_Certificate_3f8614de-0881-4ee3-8871-2d82d3835d2d.pdf",
            "originalFilename": "udyog_aadhaar.pdf"
        }
    ]
}

This is the code:
import React, { useState, useEffect } from "react";
import {
  Box,
  Grid,
  Card,
  CardHeader,
  CardContent,
  Divider,
  TextField,
  Typography,
  Autocomplete,
  Button,
  IconButton,
  Paper,
  Stack,
} from "@mui/material";
import PinDropTwoToneIcon from "@mui/icons-material/PinDropTwoTone";
import ContactEmergencyIcon from "@mui/icons-material/ContactEmergency";
import { useFormik } from "formik";
import * as Yup from "yup";
import { DemoContainer } from "@mui/x-date-pickers/internals/demo";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { fetenterpriseType } from "../../../services/dropdownService";
import {
  UpdateLegaldocuments,
  downloadDeclarationHoD,
  downloadConsentLetterPSU,
  fetchLegaldocuments,
} from "../../../services/employerLegalDoc";
import dayjs from "dayjs";
import { useSelector } from "react-redux";
import {
  Download as DownloadIcon,
  UploadFile as UploadFileIcon,
} from "@mui/icons-material";
import { useSnackbar } from "../../../components/Snackbar";
import SendIcon from "@mui/icons-material/Send";
import DownloadButton from "../../../components/downloadfile";

const LegalDocument = ({ goToNextTab, goToBackTab, markTabAsCompleted }) => {
  const { showSnackbar } = useSnackbar();
  const [enterpriseType, setEnterpriseType] = useState([]);
  const organizationType = "Bihar Registered Companies";
  const { userInfo } = useSelector((state) => state.auth);
  console.log("", userInfo?.userDetails?.organizationType?.id);
  const orgTypeId = userInfo?.userDetails?.organizationType?.id;
  const [apiData, setApiData] = useState(null);

  useEffect(() => {
    const loadenterpriseType = async () => {
      try {
        const data = await fetenterpriseType();
        setEnterpriseType(data);
      } catch (err) {
        console.error("Failed to fetch enterprise dropdown", err);
      }
    };

    const fetchUploadedDocumentsDetails = async () => {
      try {
        const data = await fetchLegaldocuments();
        if (data) {
          setApiData(data);
          console.log(data);
          // const prevDocs = {};
          // (data.result.documents || []).forEach((doc) => {
          //   prevDocs[doc.docTypeName] = doc;
          // });
          // setPrevDocuments(prevDocs);
        }
      } catch (err) {
        console.error("Failed to fetch Data", err);
      }
    };
    loadenterpriseType();
    fetchUploadedDocumentsDetails();
  }, []);

  const [uploadedFiles, setUploadedFiles] = useState({
    gst: null,
    esicCertificate: null,
    epfCertificate: null,
    declarationForm: null,
    certificateOfIncorporation: null,
    udyogAadhaarCertificate: null,
    turnoverDocumentsFy1: null,
    turnoverDocumentsFy2: null,
    turnoverDocumentsFy3: null,
    payrollDocuments: null,
    pfReturnDocuments: null,
    consentLetterPSU: null,
    declarationHoD: null,
  });

  const handleFileUpload = (fieldKey, file) => {
    if (!file) return;

    const objectURL = URL.createObjectURL(file);

    setUploadedFiles((prev) => ({
      ...prev,
      [fieldKey]: { file, url: objectURL, name: file.name },
    }));

    // Optionally update Formik if needed
    formik.setFieldValue(`${fieldKey}FileName`, file.name);
  };

  const renderFileLink = (fileObj) => {
    return fileObj ? (
      <a
        href={fileObj.url}
        target="_blank"
        rel="noopener noreferrer"
        style={{ textDecoration: "underline", color: "#1976d2" }}
      >
        {fileObj.name}
      </a>
    ) : (
      "No file chosen"
    );
  };

  const getInitialValues = () => {
    const d = apiData || {};
    console.log(d);
    const enterpriseTypeObj =
      enterpriseType.find((et) => et.id === d.enterpriseType?.id) || null;

    return {
      IncorporationCertificateNumber: d.incorporationCertNo || "",
      RegisteredAddress: d.incorporationRegisteredAddress || "",
      DateofIncorporation: d.dateOfIncorporation || "",
      UdyogCertificateNumber: d.udyogAadhaarNo || "",
      TypeofEnterprise: enterpriseTypeObj,
      DateofRegistration: d.udyogAadhaarRegDate || "",
      epfNumber: d.epfNo || "",
      RegisteredAuthority: d.epfRegisterAuthority || "",
      esicNumber: d.esicNo || "",
      esicAuthority: d.esicAuthority || "",
      TurnoverFY_2024_25: d.turnoverFY1 || "",
      TurnoverFY_2023_24: d.turnoverFY2 || "",
      TurnoverFY_2022_23: d.turnoverFY3 || "",
      Payroll: d.payroll || "",
      PF_Return_Last_3_Months: d.pfReturn3Mon || "",
      gstFileName: "",
      certificateOfIncorporationFileName: "",
      udyogAadhaarCertificateFileName: "",
      epfCertificateFileName: "",
      esicCertificateFileName: "",
      turnoverDocumentsFy1FileName: "",
      turnoverDocumentsFy2FileName: "",
      turnoverDocumentsFy3FileName: "",
      payrollDocumentsFileName: "",
      pfReturnDocumentsFileName: "",
      consentLetterPSUFileName: "",
      declarationHoDFileName: "",
      declarationFormFileName: "",
    };
  };

  const getValidationSchema = (orgTypeId) => {
    const base = {
      IncorporationCertificateNumber: Yup.string().required(
        "Incorporation Certificate Number is required"
      ),
      RegisteredAddress: Yup.string().required(
        "Registered Address is required"
      ),
      DateofIncorporation: Yup.string().required(
        "Date of Incorporation is required"
      ),

      epfNumber: Yup.string().required("EPF Number is required"),
      RegisteredAuthority: Yup.string().required(
        "Registered Authority is required"
      ),

      TurnoverFY_2024_25: Yup.string().required(
        "Turnover for FY 2024-25 is required"
      ),
      TurnoverFY_2023_24: Yup.string().required(
        "Turnover for FY 2023-24 is required"
      ),
      TurnoverFY_2022_23: Yup.string().required(
        "Turnover for FY 2022-23 is required"
      ),
    };

    switch (orgTypeId) {
      case 1: // Bihar Registered Companies
        return Yup.object({
          ...base,
          UdyogCertificateNumber: Yup.string().required(
            "Udyog Aadhaar Number is required"
          ),
          TypeofEnterprise: Yup.object().required(
            "Type of Enterprise is required"
          ),
          DateofRegistration: Yup.string().required(
            "Udyog Aadhaar Registration Date is required"
          ),
        });

      case 2: // Companies Registered Outside Bihar
        return Yup.object({
          IncorporationCertificateNumber: Yup.string().required(
            "Incorporation Certificate Number is required"
          ),
          RegisteredAddress: Yup.string().required(
            "Registered Address is required"
          ),
          DateofIncorporation: Yup.string().required(
            "Date of Incorporation is required"
          ),
          Payroll: Yup.string().required("Payroll is required"),
          PF_Return_Last_3_Months: Yup.string().required(
            "PF Return for last 3 months is required"
          ),
        });

      case 3: // Central/State PSUs
        return Yup.object({
          IncorporationCertificateNumber: Yup.string().required(
            "Incorporation Certificate Number is required"
          ),
          RegisteredAddress: Yup.string().required(
            "Registered Address is required"
          ),
          DateofIncorporation: Yup.string().required(
            "Date of Incorporation is required"
          ),
          certificateOfIncorporationFileName: Yup.string().required(
            "Certificate of Incorporation is required"
          ),
          consentLetterPSUFileName: Yup.string().required(
            "Consent letter is required"
          ),
        });

      case 4: // Departments under Bihar Govt.
        return Yup.object({
          declarationHoDFileName: Yup.string().required(
            "Declaration from HoD is required"
          ),
        });

      default:
        return Yup.object(base); // fallback
    }
  };
  const formik = useFormik({
    // initialValues: {
    //   IncorporationCertificateNumber: "",
    //   RegisteredAddress: "",
    //   DateofIncorporation: "",
    //   UdyogCertificateNumber: "",
    //   TypeofEnterprise: null,
    //   DateofRegistration: "",
    //   epfNumber: "",
    //   RegisteredAuthority: "",
    //   esicNumber: "",
    //   esicAuthority: "",
    //   TurnoverFY_2024_25: "",
    //   TurnoverFY_2023_24: "",
    //   TurnoverFY_2022_23: "",
    //   Payroll: "",
    //   PF_Return_Last_3_Months: "",

    //   // File names for display
    //   gstFileName: "",
    //   certificateOfIncorporationFileName: "",
    //   udyogAadhaarCertificateFileName: "",
    //   epfCertificateFileName: "",
    //   esicCertificateFileName: "",
    //   turnoverDocumentsFy1FileName: "",
    //   turnoverDocumentsFy2FileName: "",
    //   turnoverDocumentsFy3FileName: "",
    //   payrollDocumentsFileName: "",
    //   pfReturnDocumentsFileName: "",
    //   consentLetterPSUFileName: "",
    //   declarationHoDFileName: "",
    //   declarationFormFileName: "",
    // },
    initialValues: getInitialValues(),
    validationSchema: getValidationSchema(orgTypeId),
    onSubmit: async (values) => {
      // Prepare FormData payload
      const formData = new FormData();

      // Attach files with correct keys
      Object.entries(uploadedFiles).forEach(([key, fileObj]) => {
        if (fileObj && fileObj.file) {
          formData.append(key, fileObj.file);
        }
      });

      formData.append(
        "data",
        new Blob(
          [
            JSON.stringify({
              udyogAadhaarNo: values.UdyogCertificateNumber || null,
              udyogAadhaarRegDate: values.DateofRegistration || null,
              enterpriseTypeId: values.TypeofEnterprise?.id ?? null,
              epfNo: values.epfNumber || null,
              epfRegisterAuthority: values.RegisteredAuthority || null,
              esicNo: values.esicNumber || null,
              esicAuthority: values.esicAuthority || null,
              turnoverFY1: values.TurnoverFY_2024_25 || null,
              turnoverFY2: values.TurnoverFY_2023_24 || null,
              turnoverFY3: values.TurnoverFY_2022_23 || null,
              turnoverGreater250Cr: values.TurnoverFY_2024_25
                ? Number(values.TurnoverFY_2024_25) > 250000000
                : null,
              payroll: values.Payroll || null,
              pfReturn3Mon: values.PF_Return_Last_3_Months || null,
              incorporationCertNo:
                values.IncorporationCertificateNumber || null,
              incorporationRegisteredAddress: values.RegisteredAddress || null,
              dateOfIncorporation: values.DateofIncorporation || null,
            }),
          ],
          {
            type: "application/json",
          }
        )
      );

      try {
        const response = await UpdateLegaldocuments(formData);
        console.log("Response data:", response);
        showSnackbar(response.message || "Form submitted successfully");
        markTabAsCompleted();
        goToNextTab();
      } catch (error) {
        console.error("API error:", error);
        showSnackbar(
          `Error: ${error.response?.data?.message || error.message}`,
          "error"
        );
      }
    },
    enableReinitialize: true,
  });

  return (
    <Box component="form" onSubmit={formik.handleSubmit}>
      <Grid container spacing={3}>
        <Grid size={{ xs: 12, sm: 12 }}>
          <Card sx={{ border: "1px solid #ccc", borderRadius: 2 }}>
            <CardContent>
              {(orgTypeId === 1 || orgTypeId === 2) && (
                <Stack
                  direction="row"
                  spacing={2}
                  alignItems="start"
                  sx={{ mb: 2 }}
                >
                  <Box
                    sx={{
                      background: "#fff8e1",
                      border: "1px solid #edd078",
                      px: 3,
                      py: 2,
                      borderRadius: 2,
                      minWidth: 350,
                    }}
                  >
                    <Typography
                      variant="body2"
                      sx={{
                        fontWeight: 700,
                        color: "#c80d36",
                        mb: 1,
                        textAlign: "left",
                      }}
                    >
                      Note:
                    </Typography>

                    <Typography variant="body2" sx={{ fontWeight: 500, mb: 1 }}>
                      <span style={{ fontWeight: 700 }}>
                        Certificate of Incorporation
                      </span>{" "}
                      — The Date of Incorporation must be more than three years
                      prior to today's date. <br />
                      <span style={{ fontWeight: 700 }}>Udyog Aadhaar</span> —
                      The Date of Registration must be more than three years
                      prior to today's date. <br />
                      Please make sure that you have uploaded all the{" "}
                      <span style={{ fontWeight: 700 }}>documents</span> before
                      proceeding.
                    </Typography>
                  </Box>
                </Stack>
              )}
              {(orgTypeId === 1 ||
                orgTypeId === 2 ||
                orgTypeId === 3 ||
                orgTypeId === 4) && (
                <Box sx={{ mt: 4 }}>
                  <Typography
                    variant="h6"
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      fontWeight: 600,
                    }}
                  >
                    <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                    Upload GST Certificate
                  </Typography>
                  <Divider sx={{ mt: 2 }} />
                  <Grid container spacing={2}>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Grid item xs={12} sm={6}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                        >
                          {uploadedFiles.gst ? "Change File" : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload("gst", e.target.files[0])
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.gst)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Grid>
                </Box>
              )}
              {(orgTypeId === 1 || orgTypeId === 2 || orgTypeId === 3) && (
                <Box sx={{ mt: 4 }}>
                  <Typography
                    variant="h6"
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      fontWeight: 600,
                    }}
                  >
                    <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                    Certificate of Incorporation
                  </Typography>
                  <Divider sx={{ mt: 2 }} />
                  <Grid container spacing={2}>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <TextField
                        label="Incorporation Certificate Number"
                        name="IncorporationCertificateNumber"
                        value={formik.values.IncorporationCertificateNumber}
                        onChange={formik.handleChange}
                        error={
                          formik.touched.IncorporationCertificateNumber &&
                          Boolean(formik.errors.IncorporationCertificateNumber)
                        }
                        helperText={
                          formik.touched.IncorporationCertificateNumber &&
                          formik.errors.IncorporationCertificateNumber
                        }
                        fullWidth
                        size="small"
                        sx={{ width: "100%", mt: 2 }}
                      />
                    </Grid>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <TextField
                        label="Registered Address"
                        name="RegisteredAddress"
                        value={formik.values.RegisteredAddress}
                        onChange={formik.handleChange}
                        error={
                          formik.touched.RegisteredAddress &&
                          Boolean(formik.errors.RegisteredAddress)
                        }
                        helperText={
                          formik.touched.RegisteredAddress &&
                          formik.errors.RegisteredAddress
                        }
                        fullWidth
                        size="small"
                        sx={{ width: "100%", mt: 2 }}
                      />
                    </Grid>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                          size="small"
                          id="DateofIncorporation"
                          name="DateofIncorporation"
                          label="Date of Incorporation (>3 years)"
                          slotProps={{ textField: { size: "small" } }}
                          sx={{ width: "100%" }}
                          inputFormat="DD/MM/YYYY"
                          value={
                            formik.values.DateofIncorporation
                              ? dayjs(formik.values.DateofIncorporation)
                              : null
                          }
                          onChange={(value) => {
                            formik.setFieldValue(
                              "DateofIncorporation",
                              value ? value.format("YYYY-MM-DD") : ""
                            );
                          }}
                          renderInput={(params) => (
                            <TextField
                              margin="0"
                              size="small"
                              {...params}
                              sx={{ width: "100%", mt: 2 }}
                            />
                          )}
                        />
                      </LocalizationProvider>
                    </Grid>
                    <Grid size={{ xs: 12, sm: 4 }}>
                      <Grid item xs={12} sm={6}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                        >
                          {uploadedFiles.certificateOfIncorporation
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "certificateOfIncorporation",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(
                            uploadedFiles.certificateOfIncorporation
                          )}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Grid>
                </Box>
              )}

              {(orgTypeId === 1 || orgTypeId === 2) && (
                <>
                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h6"
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        fontWeight: 600,
                      }}
                    >
                      <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                      Udyog Aadhaar Details
                    </Typography>

                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Udyog Certificate Number"
                          name="UdyogCertificateNumber"
                          value={formik.values.UdyogCertificateNumber}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.UdyogCertificateNumber &&
                            Boolean(formik.errors.UdyogCertificateNumber)
                          }
                          helperText={
                            formik.touched.UdyogCertificateNumber &&
                            formik.errors.UdyogCertificateNumber
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Autocomplete
                          size="small"
                          options={enterpriseType}
                          getOptionLabel={(option) => option.label}
                          value={formik.values.TypeofEnterprise}
                          onChange={(e, newValue) => {
                            formik.setFieldValue("TypeofEnterprise", newValue);
                          }}
                          fullWidth
                          renderInput={(params) => (
                            <TextField
                              sx={{ width: "100%", mt: 2 }}
                              {...params}
                              label="Type of Enterprise"
                              variant="outlined"
                              error={
                                formik.touched.TypeofEnterprise &&
                                Boolean(formik.errors.TypeofEnterprise)
                              }
                              helperText={
                                formik.touched.TypeofEnterprise &&
                                formik.errors.TypeofEnterprise
                              }
                            />
                          )}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <LocalizationProvider dateAdapter={AdapterDayjs}>
                          <DatePicker
                            size="small"
                            id="DateofRegistration"
                            name="DateofRegistration"
                            label="Date of Registration (>3 years)"
                            slotProps={{ textField: { size: "small" } }}
                            sx={{ width: "100%" }}
                            inputFormat="DD/MM/YYYY"
                            value={
                              formik.values.DateofRegistration
                                ? dayjs(formik.values.DateofRegistration)
                                : null
                            }
                            onChange={(value) => {
                              formik.setFieldValue(
                                "DateofRegistration",
                                value ? value.format("YYYY-MM-DD") : ""
                              );
                            }}
                            renderInput={(params) => (
                              <TextField
                                margin="0"
                                size="small"
                                {...params}
                                sx={{ width: "100%", mt: 2 }}
                              />
                            )}
                          />
                        </LocalizationProvider>
                      </Grid>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <Grid item xs={12} sm={6}>
                          <Button
                            variant="outlined"
                            component="label"
                            fullWidth
                            size="small"
                          >
                            {uploadedFiles.udyogAadhaarCertificate
                              ? "Change File"
                              : "Choose File"}
                            <input
                              type="file"
                              accept="application/pdf"
                              hidden
                              onChange={(e) =>
                                handleFileUpload(
                                  "udyogAadhaarCertificate",
                                  e.target.files[0]
                                )
                              }
                            />
                          </Button>
                          <Typography variant="body2" sx={{ mt: 1 }}>
                            {renderFileLink(
                              uploadedFiles.udyogAadhaarCertificate
                            )}
                          </Typography>
                        </Grid>
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h6"
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        fontWeight: 600,
                      }}
                    >
                      <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                      EPF Registration Details
                    </Typography>

                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <TextField
                          label="EPF Number"
                          name="epfNumber"
                          value={formik.values.epfNumber}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.epfNumber &&
                            Boolean(formik.errors.epfNumber)
                          }
                          helperText={
                            formik.touched.epfNumber && formik.errors.epfNumber
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <TextField
                          label="Registered Authority"
                          name="RegisteredAuthority"
                          value={formik.values.RegisteredAuthority}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.RegisteredAuthority &&
                            Boolean(formik.errors.RegisteredAuthority)
                          }
                          helperText={
                            formik.touched.RegisteredAuthority &&
                            formik.errors.RegisteredAuthority
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 4 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.epfCertificate
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "epfCertificate",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.epfCertificate)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h6"
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        fontWeight: 600,
                      }}
                    >
                      <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                      ESIC Details
                    </Typography>

                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <TextField
                          label="ESIC Number"
                          name="esicNumber"
                          value={formik.values.esicNumber}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.esicNumber &&
                            Boolean(formik.errors.esicNumber)
                          }
                          helperText={
                            formik.touched.esicNumber &&
                            formik.errors.esicNumber
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <TextField
                          label="ESIC State/Authority"
                          name="esicAuthority"
                          value={formik.values.esicAuthority}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.esicAuthority &&
                            Boolean(formik.errors.esicAuthority)
                          }
                          helperText={
                            formik.touched.esicAuthority &&
                            formik.errors.esicAuthority
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 4 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.esicCertificate
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "esicCertificate",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.esicCertificate)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h6"
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        fontWeight: 600,
                      }}
                    >
                      <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                      Turnover
                    </Typography>

                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Turnover (FY-2024-25)"
                          name="TurnoverFY_2024_25"
                          value={formik.values.TurnoverFY_2024_25}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.TurnoverFY_2024_25 &&
                            Boolean(formik.errors.TurnoverFY_2024_25)
                          }
                          helperText={
                            formik.touched.TurnoverFY_2024_25 &&
                            formik.errors.TurnoverFY_2024_25
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.turnoverDocumentsFy1
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "turnoverDocumentsFy1",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.turnoverDocumentsFy1)}
                        </Typography>
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Turnover (FY-2023-24)"
                          name="TurnoverFY_2023_24"
                          value={formik.values.TurnoverFY_2023_24}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.TurnoverFY_2023_24 &&
                            Boolean(formik.errors.TurnoverFY_2023_24)
                          }
                          helperText={
                            formik.touched.TurnoverFY_2023_24 &&
                            formik.errors.TurnoverFY_2023_24
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.turnoverDocumentsFy2
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "turnoverDocumentsFy2",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.turnoverDocumentsFy2)}
                        </Typography>
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Turnover (FY-2022-23)"
                          name="TurnoverFY_2022_23"
                          value={formik.values.TurnoverFY_2022_23}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.TurnoverFY_2022_23 &&
                            Boolean(formik.errors.TurnoverFY_2022_23)
                          }
                          helperText={
                            formik.touched.TurnoverFY_2022_23 &&
                            formik.errors.TurnoverFY_2022_23
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.turnoverDocumentsFy3
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "turnoverDocumentsFy3",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.turnoverDocumentsFy3)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>
                </>
              )}

              {orgTypeId === 2 && (
                <>
                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h7"
                      sx={{ display: "flex", alignItems: "center" }}
                    >
                      <ContactEmergencyIcon sx={{ mr: 1 }} />
                      Payroll
                    </Typography>
                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Payroll"
                          name="Payroll"
                          value={formik.values.Payroll}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.Payroll &&
                            Boolean(formik.errors.Payroll)
                          }
                          helperText={
                            formik.touched.Payroll && formik.errors.Payroll
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%" }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                        >
                          {uploadedFiles.payrollDocuments
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "payrollDocuments",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.payrollDocuments)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h7"
                      sx={{ display: "flex", alignItems: "center" }}
                    >
                      <ContactEmergencyIcon sx={{ mr: 1 }} />
                      PF Return
                    </Typography>
                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="PF Return (Last 3 Months)
"
                          name="PF_Return_Last_3_Months"
                          value={formik.values.PF_Return_Last_3_Months}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.PF_Return_Last_3_Months &&
                            Boolean(formik.errors.PF_Return_Last_3_Months)
                          }
                          helperText={
                            formik.touched.PF_Return_Last_3_Months &&
                            formik.errors.PF_Return_Last_3_Months
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%" }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                        >
                          {uploadedFiles.pfReturnDocuments
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "pfReturnDocuments",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.pfReturnDocuments)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>
                </>
              )}

              {orgTypeId === 3 && (
                <Box sx={{ mt: 4 }}>
                  <Typography
                    variant="h6"
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      fontWeight: 600,
                    }}
                  >
                    <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                    Consent Letter of Chairperson/Executive of the Respective
                    PSUs
                  </Typography>

                  <Divider sx={{ my: 2 }} />

                  <Grid container spacing={3}>
                    {/* Left side: Download Format */}
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        Consent Letter Format
                      </Typography>

                      <DownloadButton
                        downloadFn={downloadConsentLetterPSU}
                        label="Download Consent Letter PSU"
                      />
                    </Grid>

                    {/* Right side: Upload Signed Consent Letter */}
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        Upload Signed Consent Letter
                      </Typography>
                      <Button
                        variant="outlined"
                        component="label"
                        fullWidth
                        size="small"
                      >
                        {uploadedFiles.consentLetterPSU
                          ? "Change File"
                          : "Choose File"}
                        <input
                          type="file"
                          accept="application/pdf"
                          hidden
                          onChange={(e) =>
                            handleFileUpload(
                              "consentLetterPSU",
                              e.target.files[0]
                            )
                          }
                        />
                      </Button>
                      <Typography variant="body2" sx={{ mt: 1 }}>
                        {renderFileLink(uploadedFiles.consentLetterPSU)}
                      </Typography>
                    </Grid>
                  </Grid>
                </Box>
              )}

              {orgTypeId === 4 && (
                <Box sx={{ mt: 4 }}>
                  <Typography
                    variant="h6"
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      fontWeight: 600,
                    }}
                  >
                    <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                    Declaration/Consent letter of the Head of the department
                    (HoD)
                  </Typography>

                  <Divider sx={{ my: 2 }} />

                  <Grid container spacing={3} mb={1}>
                    {/* Left side: Download Format */}
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        Declaration/Consent letter Format
                      </Typography>

                      <DownloadButton
                        downloadFn={downloadDeclarationHoD}
                        label="Download Declaration HoD"
                      />
                    </Grid>

                    {/* Right side: Upload Signed Consent Letter */}
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        Upload Signed Declaration Letter
                      </Typography>
                      <Button
                        variant="outlined"
                        component="label"
                        fullWidth
                        size="small"
                      >
                        {uploadedFiles.declarationHoD
                          ? "Change File"
                          : "Choose File"}
                        <input
                          type="file"
                          accept="application/pdf"
                          hidden
                          onChange={(e) =>
                            handleFileUpload(
                              "declarationHoD",
                              e.target.files[0]
                            )
                          }
                        />
                      </Button>
                      <Typography variant="body2" sx={{ mt: 1 }}>
                        {renderFileLink(uploadedFiles.declarationHoD)}
                      </Typography>
                    </Grid>
                  </Grid>
                </Box>
              )}

              <Box
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  gap: 2,
                  mt: 2,
                }}
              >
                <Button
                  onClick={() => goToBackTab()}
                  variant="contained"
                  startIcon={<SendIcon sx={{ transform: "scaleX(-1)" }} />}
                >
                  Back
                </Button>

                <Button
                  type="submit"
                  variant="contained"
                  endIcon={<SendIcon />}
                >
                  Save & Next
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default LegalDocument;


