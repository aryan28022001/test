import React, { useState, useEffect } from "react";
import {
  Box,
  Grid,
  Card,
  CardContent,
  Divider,
  TextField,
  Typography,
  Autocomplete,
  Button,
  Stack,
} from "@mui/material";
import ContactEmergencyIcon from "@mui/icons-material/ContactEmergency";
import { useFormik } from "formik";
import * as Yup from "yup";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { fetenterpriseType } from "../../../services/dropdownService";
import {
  UpdateLegaldocuments,
  downloadDeclarationHoD,
  downloadConsentLetterPSU,
  fetchLegaldocuments,
} from "../../../services/employerLegalDoc";
import dayjs from "dayjs";
import { useSelector } from "react-redux";
import { useSnackbar } from "../../../components/Snackbar";
import SendIcon from "@mui/icons-material/Send";
import DownloadButton from "../../../components/downloadfile";

// Helper: Map API docTypeId to uploadedFiles keys
const docTypeIdToKey = {
  4: "certificateOfIncorporation",
  12: "gst",
  2: "epfCertificate",
  14: "turnoverDocumentsFy2",
  7: "payrollDocuments",
  8: "pfReturnDocuments",
  6: "turnoverDocumentsFy1",
  15: "turnoverDocumentsFy3",
};

const LegalDocument = ({ goToNextTab, goToBackTab, markTabAsCompleted }) => {
  const { showSnackbar } = useSnackbar();
  const [enterpriseType, setEnterpriseType] = useState([]);
  const { userInfo } = useSelector((state) => state.auth);
  const orgTypeId = userInfo?.userDetails?.organizationType?.id;

  const [apiData, setApiData] = useState(null);

  // Uploaded files state (for new uploads)
  const [uploadedFiles, setUploadedFiles] = useState({
    gst: null,
    esicCertificate: null,
    epfCertificate: null,
    declarationForm: null,
    certificateOfIncorporation: null,
    udyogAadhaarCertificate: null,
    turnoverDocumentsFy1: null,
    turnoverDocumentsFy2: null,
    turnoverDocumentsFy3: null,
    payrollDocuments: null,
    pfReturnDocuments: null,
    consentLetterPSU: null,
    declarationHoD: null,
  });

  useEffect(() => {
    const loadenterpriseType = async () => {
      try {
        const data = await fetenterpriseType();
        setEnterpriseType(data);
      } catch (err) {
        console.error("Failed to fetch enterprise dropdown", err);
      }
    };

    const fetchUploadedDocumentsDetails = async () => {
      try {
        const data = await fetchLegaldocuments();
        setApiData(data?.result || null);
      } catch (err) {
        console.error("Failed to fetch Data", err);
      }
    };

    loadenterpriseType();
    fetchUploadedDocumentsDetails();
  }, []);

  function findEnterpriseTypeOptionById(id) {
    if (!id || !enterpriseType?.length) return null;
    return enterpriseType.find((item) => item.id === id) ?? null;
  }

  // When API data arrives, update Formik initial values and uploadedFiles state
  useEffect(() => {
    if (!apiData) return;

    const initialValuesFromApi = {
      IncorporationCertificateNumber: apiData.incorporationCertNo || "",
      RegisteredAddress: apiData.incorporationRegisteredAddress || "",
      DateofIncorporation: apiData.dateOfIncorporation || "",
      UdyogCertificateNumber: apiData.udyogAadhaarNo || "",
      TypeofEnterprise: findEnterpriseTypeOptionById(apiData.enterpriseType),
      DateofRegistration: apiData.udyogAadhaarRegDate || "",
      epfNumber: apiData.epfNo || "",
      RegisteredAuthority: apiData.epfRegisterAuthority || "",
      esicNumber: apiData.esicNo || "",
      esicAuthority: apiData.esicAuthority || "",
      TurnoverFY_2024_25: apiData.turnoverFY1 || "",
      TurnoverFY_2023_24: apiData.turnoverFY2 || "",
      TurnoverFY_2022_23: apiData.turnoverFY3 || "",
      Payroll: apiData.payroll ?? "",
      PF_Return_Last_3_Months: apiData.pfReturn3Mon ?? "",
      gstFileName: "",
      certificateOfIncorporationFileName: "",
      udyogAadhaarCertificateFileName: "",
      epfCertificateFileName: "",
      esicCertificateFileName: "",
      turnoverDocumentsFy1FileName: "",
      turnoverDocumentsFy2FileName: "",
      turnoverDocumentsFy3FileName: "",
      payrollDocumentsFileName: "",
      pfReturnDocumentsFileName: "",
      consentLetterPSUFileName: "",
      declarationHoDFileName: "",
      declarationFormFileName: "",
    };

    // Set filenames from documents array
    if (apiData.documents && Array.isArray(apiData.documents)) {
      apiData.documents.forEach((doc) => {
        const key = docTypeIdToKey[doc.docTypeId];
        if (key) {
          initialValuesFromApi[`${key}FileName`] = doc.originalFilename || doc.filename || "";
        }
      });
    }

    formik.setValues(initialValuesFromApi);

    // Prepare uploadedFiles for display (no file object, but display name + filename)
    const filesState = { ...uploadedFiles };
    if (apiData.documents && Array.isArray(apiData.documents)) {
      apiData.documents.forEach((doc) => {
        const key = docTypeIdToKey[doc.docTypeId];
        if (key) {
          filesState[key] = {
            url: "", // will be used for download link in future
            name: doc.docTypeName + " (" + (doc.originalFilename || doc.filename) + ")",
            docTypeId: doc.docTypeId,
            filename: doc.filename,
            originalFilename: doc.originalFilename,
            docTypeName: doc.docTypeName,
          };
        }
      });
    }
    setUploadedFiles(filesState);
    // eslint-disable-next-line
  }, [apiData, enterpriseType]);

  // File upload handler (overwrites only the file for the field)
  const handleFileUpload = (fieldKey, file) => {
    if (!file) return;
    const objectURL = URL.createObjectURL(file);

    setUploadedFiles((prev) => ({
      ...prev,
      [fieldKey]: { file, url: objectURL, name: file.name },
    }));

    formik.setFieldValue(`${fieldKey}FileName`, file.name);
  };

  // Helper: get previous doc from API by docTypeId
  const getPreviousDoc = (docTypeId) =>
    apiData?.documents?.find((doc) => doc.docTypeId === docTypeId);

  // File display: show previous uploaded doc if exists and no new upload, otherwise show uploaded file
  const renderFileSection = (fieldKey, label, docTypeId) => {
    const uploadedFile = uploadedFiles[fieldKey];
    const previousDoc = getPreviousDoc(docTypeId);

    const showPrevious = previousDoc && !uploadedFile?.file;

    return (
      <Stack direction="row" alignItems="center" spacing={2}>
        <Button
          variant="outlined"
          component="label"
          size="small"
        >
          {uploadedFile?.file ? "Change File" : "Choose File"}
          <input
            type="file"
            accept="application/pdf"
            hidden
            onChange={(e) => handleFileUpload(fieldKey, e.target.files[0])}
          />
        </Button>
        {showPrevious && (
          <Typography variant="body2" color="secondary">
            Previous uploaded doc:&nbsp;
            <a
              href={"#"} // You may update this to actual download link if available
              target="_blank"
              rel="noopener noreferrer"
              style={{ textDecoration: "underline", fontWeight: 600 }}
            >
              {previousDoc.originalFilename || previousDoc.filename}
            </a>
          </Typography>
        )}
        {uploadedFile?.file && (
          <Typography variant="body2">
            <a
              href={uploadedFile.url}
              target="_blank"
              rel="noopener noreferrer"
              style={{ textDecoration: "underline", fontWeight: 600 }}
            >
              {uploadedFile.name}
            </a>
          </Typography>
        )}
      </Stack>
    );
  };

  const getValidationSchema = (orgTypeId) => {
    const base = {
      IncorporationCertificateNumber: Yup.string().required(
        "Incorporation Certificate Number is required"
      ),
      RegisteredAddress: Yup.string().required("Registered Address is required"),
      DateofIncorporation: Yup.string().required(
        "Date of Incorporation is required"
      ),
      epfNumber: Yup.string().required("EPF Number is required"),
      RegisteredAuthority: Yup.string().required(
        "Registered Authority is required"
      ),
      TurnoverFY_2024_25: Yup.string().required(
        "Turnover for FY 2024-25 is required"
      ),
      TurnoverFY_2023_24: Yup.string().required(
        "Turnover for FY 2023-24 is required"
      ),
      TurnoverFY_2022_23: Yup.string().required(
        "Turnover for FY 2022-23 is required"
      ),
    };

    switch (orgTypeId) {
      case 1:
        return Yup.object({
          ...base,
          UdyogCertificateNumber: Yup.string().required(
            "Udyog Aadhaar Number is required"
          ),
          TypeofEnterprise: Yup.object().required(
            "Type of Enterprise is required"
          ),
          DateofRegistration: Yup.string().required(
            "Udyog Aadhaar Registration Date is required"
          ),
        });

      case 2:
        return Yup.object({
          ...base,
          Payroll: Yup.string().required("Payroll is required"),
          PF_Return_Last_3_Months: Yup.string().required(
            "PF Return for last 3 months is required"
          ),
        });

      case 3:
        return Yup.object({
          ...base,
          certificateOfIncorporationFileName: Yup.string().required(
            "Certificate of Incorporation is required"
          ),
          consentLetterPSUFileName: Yup.string().required(
            "Consent letter is required"
          ),
        });

      case 4:
        return Yup.object({
          declarationHoDFileName: Yup.string().required(
            "Declaration from HoD is required"
          ),
        });

      default:
        return Yup.object(base);
    }
  };

  const formik = useFormik({
    initialValues: {
      IncorporationCertificateNumber: "",
      RegisteredAddress: "",
      DateofIncorporation: "",
      UdyogCertificateNumber: "",
      TypeofEnterprise: null,
      DateofRegistration: "",
      epfNumber: "",
      RegisteredAuthority: "",
      esicNumber: "",
      esicAuthority: "",
      TurnoverFY_2024_25: "",
      TurnoverFY_2023_24: "",
      TurnoverFY_2022_23: "",
      Payroll: "",
      PF_Return_Last_3_Months: "",
      gstFileName: "",
      certificateOfIncorporationFileName: "",
      udyogAadhaarCertificateFileName: "",
      epfCertificateFileName: "",
      esicCertificateFileName: "",
      turnoverDocumentsFy1FileName: "",
      turnoverDocumentsFy2FileName: "",
      turnoverDocumentsFy3FileName: "",
      payrollDocumentsFileName: "",
      pfReturnDocumentsFileName: "",
      consentLetterPSUFileName: "",
      declarationHoDFileName: "",
      declarationFormFileName: "",
    },
    validationSchema: getValidationSchema(orgTypeId),
    onSubmit: async (values) => {
      const formData = new FormData();
      Object.entries(uploadedFiles).forEach(([key, fileObj]) => {
        if (fileObj && fileObj.file) {
          formData.append(key, fileObj.file);
        }
      });

      formData.append(
        "data",
        new Blob(
          [
            JSON.stringify({
              udyogAadhaarNo: values.UdyogCertificateNumber || null,
              udyogAadhaarRegDate: values.DateofRegistration || null,
              enterpriseTypeId: values.TypeofEnterprise?.id ?? null,
              epfNo: values.epfNumber || null,
              epfRegisterAuthority: values.RegisteredAuthority || null,
              esicNo: values.esicNumber || null,
              esicAuthority: values.esicAuthority || null,
              turnoverFY1: values.TurnoverFY_2024_25 || null,
              turnoverFY2: values.TurnoverFY_2023_24 || null,
              turnoverFY3: values.TurnoverFY_2022_23 || null,
              turnoverGreater250Cr: values.TurnoverFY_2024_25
                ? Number(values.TurnoverFY_2024_25) > 250000000
                : null,
              payroll: values.Payroll || null,
              pfReturn3Mon: values.PF_Return_Last_3_Months || null,
              incorporationCertNo:
                values.IncorporationCertificateNumber || null,
              incorporationRegisteredAddress: values.RegisteredAddress || null,
              dateOfIncorporation: values.DateofIncorporation || null,
            }),
          ],
          { type: "application/json" }
        )
      );

      try {
        const response = await UpdateLegaldocuments(formData);
        showSnackbar(response.message || "Form submitted successfully");
        markTabAsCompleted();
        goToNextTab();
      } catch (error) {
        showSnackbar(
          `Error: ${error.response?.data?.message || error.message}`,
          "error"
        );
      }
    },
    enableReinitialize: true,
  });

  return (
    <Box component="form" onSubmit={formik.handleSubmit}>
      <Grid container spacing={3}>
        <Grid xs={12} sm={12} item>
          <Card sx={{ border: "1px solid #ccc", borderRadius: 2 }}>
            <CardContent>
              {/* Example for GST Certificate */}
              <Box sx={{ mt: 4 }}>
                <Typography
                  variant="h6"
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    fontWeight: 600,
                  }}
                >
                  <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                  Upload GST Certificate
                </Typography>
                <Divider sx={{ mt: 2 }} />
                <Grid container spacing={2}>
                  <Grid xs={12} sm={6} item>
                    {renderFileSection("gst", "GST Certificate", 12)}
                  </Grid>
                </Grid>
              </Box>

              {/* Example for Certificate of Incorporation */}
              <Box sx={{ mt: 4 }}>
                <Typography
                  variant="h6"
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    fontWeight: 600,
                  }}
                >
                  <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                  Certificate of Incorporation
                </Typography>
                <Divider sx={{ mt: 2 }} />
                <Grid container spacing={2}>
                  <Grid xs={12} sm={6} item>
                    <TextField
                      label="Incorporation Certificate Number"
                      name="IncorporationCertificateNumber"
                      value={formik.values.IncorporationCertificateNumber}
                      onChange={formik.handleChange}
                      error={
                        formik.touched.IncorporationCertificateNumber &&
                        Boolean(formik.errors.IncorporationCertificateNumber)
                      }
                      helperText={
                        formik.touched.IncorporationCertificateNumber &&
                        formik.errors.IncorporationCertificateNumber
                      }
                      fullWidth
                      size="small"
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid xs={12} sm={6} item>
                    {renderFileSection("certificateOfIncorporation", "Certificate of Incorporation", 4)}
                  </Grid>
                </Grid>
              </Box>

              {/* Repeat the above pattern for all other document types */}
              {/* ... */}

              <Box
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  gap: 2,
                  mt: 2,
                }}
              >
                <Button
                  onClick={() => goToBackTab()}
                  variant="contained"
                  startIcon={<SendIcon sx={{ transform: "scaleX(-1)" }} />}
                >
                  Back
                </Button>

                <Button
                  type="submit"
                  variant="contained"
                  endIcon={<SendIcon />}
                >
                  Save & Next
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default LegalDocument;
