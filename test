export const downloadDeclarationHoD = async () => {
  const response = await axiosInstance.get(
    "/api/employer/profile/documents/template/declarationHoD",
    {
      responseType: "blob", 
    }
  );
  return response;
};

export const downloadConsentLetterPSU = async () => {
  const response = await axiosInstance.get(
    "/api/employer/profile/documents/template/consentLetterPSU",
    {
      responseType: "blob", 
    }
  );
  return response;
};

import React, { useState, useEffect } from "react";
import {
  Box,
  Grid,
  Card,
  CardHeader,
  CardContent,
  Divider,
  TextField,
  Typography,
  Autocomplete,
  Button,
  IconButton,
  Paper,
  Stack,
} from "@mui/material";
import PinDropTwoToneIcon from "@mui/icons-material/PinDropTwoTone";
import ContactEmergencyIcon from "@mui/icons-material/ContactEmergency";
import { useFormik } from "formik";
import * as Yup from "yup";
import { DemoContainer } from "@mui/x-date-pickers/internals/demo";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { fetenterpriseType } from "../../../services/dropdownService";
import {
  UpdateLegaldocuments,
  downloadDeclarationHoD,
  downloadConsentLetterPSU,
} from "../../../services/employerLegalDoc";
import dayjs from "dayjs";
import { useSelector } from "react-redux";
import {
  Download as DownloadIcon,
  UploadFile as UploadFileIcon,
} from "@mui/icons-material";
import { useSnackbar } from "../../../components/Snackbar";

const LegalDocument = ({ goToNextTab, goToBackTab, markTabAsCompleted }) => {
  const { showSnackbar } = useSnackbar();
  const [enterpriseType, setEnterpriseType] = useState([]);
  const organizationType = "Bihar Registered Companies";
  const { userInfo } = useSelector((state) => state.auth);
  console.log("", userInfo?.userDetails?.organizationType?.id);
  const orgTypeId = userInfo?.userDetails?.organizationType?.id;

  useEffect(() => {
    const loadenterpriseType = async () => {
      try {
        const data = await fetenterpriseType();
        setEnterpriseType(data);
      } catch (err) {
        console.error("Failed to fetch organization dropdown", err);
      }
    };
    loadenterpriseType();
  }, []);

  const [uploadedFiles, setUploadedFiles] = useState({
    gst: null,
    esicCertificate: null,
    epfCertificate: null,
    declarationForm: null,
    certificateOfIncorporation: null,
    udyogAadhaarCertificate: null,
    turnoverDocumentsFy1: null,
    turnoverDocumentsFy2: null,
    turnoverDocumentsFy3: null,
    payrollDocuments: null,
    pfReturnDocuments: null,
    consentLetterPSU: null,
    declarationHoD: null,
  });

  const handleFileUpload = (fieldKey, file) => {
    if (!file) return;

    const objectURL = URL.createObjectURL(file);

    setUploadedFiles((prev) => ({
      ...prev,
      [fieldKey]: { file, url: objectURL, name: file.name },
    }));

    // Optionally update Formik if needed
    formik.setFieldValue(`${fieldKey}FileName`, file.name);
  };

  const renderFileLink = (fileObj) => {
    return fileObj ? (
      <a
        href={fileObj.url}
        target="_blank"
        rel="noopener noreferrer"
        style={{ textDecoration: "underline", color: "#1976d2" }}
      >
        {fileObj.name}
      </a>
    ) : (
      "No file chosen"
    );
  };
  const getValidationSchema = (orgTypeId) => {
    const base = {
      IncorporationCertificateNumber: Yup.string().required(
        "Incorporation Certificate Number is required"
      ),
      RegisteredAddress: Yup.string().required(
        "Registered Address is required"
      ),
      DateofIncorporation: Yup.string().required(
        "Date of Incorporation is required"
      ),

      epfNumber: Yup.string().required("EPF Number is required"),
      RegisteredAuthority: Yup.string().required(
        "Registered Authority is required"
      ),

      TurnoverFY_2024_25: Yup.string().required(
        "Turnover for FY 2024-25 is required"
      ),
      TurnoverFY_2023_24: Yup.string().required(
        "Turnover for FY 2023-24 is required"
      ),
      TurnoverFY_2022_23: Yup.string().required(
        "Turnover for FY 2022-23 is required"
      ),
    };

    switch (orgTypeId) {
      case 1: // Bihar Registered Companies
        return Yup.object({
          ...base,
          UdyogCertificateNumber: Yup.string().required(
            "Udyog Aadhaar Number is required"
          ),
          TypeofEnterprise: Yup.object().required(
            "Type of Enterprise is required"
          ),
          DateofRegistration: Yup.string().required(
            "Udyog Aadhaar Registration Date is required"
          ),
        });

      case 2: // Companies Registered Outside Bihar
        return Yup.object({
          IncorporationCertificateNumber: Yup.string().required(
            "Incorporation Certificate Number is required"
          ),
          RegisteredAddress: Yup.string().required(
            "Registered Address is required"
          ),
          DateofIncorporation: Yup.string().required(
            "Date of Incorporation is required"
          ),
          Payroll: Yup.string().required("Payroll is required"),
          PF_Return_Last_3_Months: Yup.string().required(
            "PF Return for last 3 months is required"
          ),
        });

      case 3: // Central/State PSUs
        return Yup.object({
          IncorporationCertificateNumber: Yup.string().required(
            "Incorporation Certificate Number is required"
          ),
          RegisteredAddress: Yup.string().required(
            "Registered Address is required"
          ),
          DateofIncorporation: Yup.string().required(
            "Date of Incorporation is required"
          ),
          certificateOfIncorporationFileName: Yup.string().required(
            "Certificate of Incorporation is required"
          ),
          consentLetterPSUFileName: Yup.string().required(
            "Consent letter is required"
          ),
        });

      case 4: // Departments under Bihar Govt.
        return Yup.object({
          declarationHoDFileName: Yup.string().required(
            "Declaration from HoD is required"
          ),
        });

      default:
        return Yup.object(base); // fallback
    }
  };

  const formik = useFormik({
    initialValues: {
      IncorporationCertificateNumber: "",
      RegisteredAddress: "",
      DateofIncorporation: "",
      UdyogCertificateNumber: "",
      TypeofEnterprise: null,
      DateofRegistration: "",
      epfNumber: "",
      RegisteredAuthority: "",
      esicNumber: "",
      esicAuthority: "",
      TurnoverFY_2024_25: "",
      TurnoverFY_2023_24: "",
      TurnoverFY_2022_23: "",
      Payroll: "",
      PF_Return_Last_3_Months: "",

      // File names for display
      gstFileName: "",
      certificateOfIncorporationFileName: "",
      udyogAadhaarCertificateFileName: "",
      epfCertificateFileName: "",
      esicCertificateFileName: "",
      turnoverDocumentsFy1FileName: "",
      turnoverDocumentsFy2FileName: "",
      turnoverDocumentsFy3FileName: "",
      payrollDocumentsFileName: "",
      pfReturnDocumentsFileName: "",
      consentLetterPSUFileName: "",
      declarationHoDFileName: "",
      declarationFormFileName: "",
    },

    validationSchema: getValidationSchema(orgTypeId),
    onSubmit: async (values) => {
      // Prepare FormData payload
      const formData = new FormData();

      // Attach files with correct keys
      Object.entries(uploadedFiles).forEach(([key, fileObj]) => {
        if (fileObj && fileObj.file) {
          formData.append(key, fileObj.file);
        }
      });

      formData.append(
        "data",
        new Blob(
          [
            JSON.stringify({
              udyogAadhaarNo: values.UdyogCertificateNumber || null,
              udyogAadhaarRegDate: values.DateofRegistration || null,
              enterpriseTypeId: values.TypeofEnterprise?.id ?? null,
              epfNo: values.epfNumber || null,
              epfRegisterAuthority: values.RegisteredAuthority || null,
              esicNo: values.esicNumber || null,
              esicAuthority: values.esicAuthority || null,
              turnoverFY1: values.TurnoverFY_2024_25 || null,
              turnoverFY2: values.TurnoverFY_2023_24 || null,
              turnoverFY3: values.TurnoverFY_2022_23 || null,
              turnoverGreater250Cr: values.TurnoverFY_2024_25
                ? Number(values.TurnoverFY_2024_25) > 250000000
                : null,
              payroll: values.Payroll || null,
              pfReturn3Mon: values.PF_Return_Last_3_Months || null,
              incorporationCertNo:
                values.IncorporationCertificateNumber || null,
              incorporationRegisteredAddress: values.RegisteredAddress || null,
              dateOfIncorporation: values.DateofIncorporation || null,
            }),
          ],
          {
            type: "application/json",
          }
        )
      );

      // try {
      //   const response = await UpdateLegaldocuments(formData);
      //   console.log(response.data.message);
      //   showSnackbar(response.message || "Form submitted successfully");
      //   goToNextTab();
      // } catch (error) {
      //   showSnackbar(`Error: ${error.response.data.message}`, "error");
      // }

      try {
        const response = await UpdateLegaldocuments(formData);
        console.log("Response data:", response);
        showSnackbar(response.message || "Form submitted successfully");
        markTabAsCompleted();
        goToNextTab();
      } catch (error) {
        console.error("API error:", error);
        showSnackbar(
          `Error: ${error.response?.data?.message || error.message}`,
          "error"
        );
      }
    },
    enableReinitialize: true,
  });

  return (
    <Box component="form" onSubmit={formik.handleSubmit}>
      <Grid container spacing={3}>
        <Grid size={{ xs: 12, sm: 12 }}>
          <Card sx={{ border: "1px solid #ccc", borderRadius: 2 }}>
            <CardContent>
              {(orgTypeId === 1 || orgTypeId === 2) && (
                <Stack
                  direction="row"
                  spacing={2}
                  alignItems="start"
                  sx={{ mb: 2 }}
                >
                  <Box
                    sx={{
                      background: "#fff8e1",
                      border: "1px solid #edd078",
                      px: 3,
                      py: 2,
                      borderRadius: 2,
                      minWidth: 350,
                    }}
                  >
                    <Typography
                      variant="body2"
                      sx={{
                        fontWeight: 700,
                        color: "#c80d36",
                        mb: 1,
                        textAlign: "left",
                      }}
                    >
                      Note:
                    </Typography>

                    <Typography variant="body2" sx={{ fontWeight: 500, mb: 1 }}>
                      <span style={{ fontWeight: 700 }}>
                        Certificate of Incorporation
                      </span>{" "}
                      — The Date of Incorporation must be more than three years
                      prior to today's date. <br />
                      <span style={{ fontWeight: 700 }}>Udyog Aadhaar</span> —
                      The Date of Registration must be more than three years
                      prior to today's date. <br />
                      Please make sure that you have uploaded all the{" "}
                      <span style={{ fontWeight: 700 }}>documents</span> before
                      proceeding.
                    </Typography>
                  </Box>
                </Stack>
              )}
              {(orgTypeId === 1 ||
                orgTypeId === 2 ||
                orgTypeId === 3 ||
                orgTypeId === 4) && (
                <Box sx={{ mt: 4 }}>
                  <Typography
                    variant="h6"
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      fontWeight: 600,
                    }}
                  >
                    <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                    Upload GST Certificate
                  </Typography>
                  <Divider sx={{ mt: 2 }} />
                  <Grid container spacing={2}>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Grid item xs={12} sm={6}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                        >
                          {uploadedFiles.gst ? "Change File" : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload("gst", e.target.files[0])
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.gst)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Grid>
                </Box>
              )}
              {(orgTypeId === 1 || orgTypeId === 2 || orgTypeId === 3) && (
                <Box sx={{ mt: 4 }}>
                  <Typography
                    variant="h6"
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      fontWeight: 600,
                    }}
                  >
                    <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                    Certificate of Incorporation
                  </Typography>
                  <Divider sx={{ mt: 2 }} />
                  <Grid container spacing={2}>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <TextField
                        label="Incorporation Certificate Number"
                        name="IncorporationCertificateNumber"
                        value={formik.values.IncorporationCertificateNumber}
                        onChange={formik.handleChange}
                        error={
                          formik.touched.IncorporationCertificateNumber &&
                          Boolean(formik.errors.IncorporationCertificateNumber)
                        }
                        helperText={
                          formik.touched.IncorporationCertificateNumber &&
                          formik.errors.IncorporationCertificateNumber
                        }
                        fullWidth
                        size="small"
                        sx={{ width: "100%", mt: 2 }}
                      />
                    </Grid>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <TextField
                        label="Registered Address"
                        name="RegisteredAddress"
                        value={formik.values.RegisteredAddress}
                        onChange={formik.handleChange}
                        error={
                          formik.touched.RegisteredAddress &&
                          Boolean(formik.errors.RegisteredAddress)
                        }
                        helperText={
                          formik.touched.RegisteredAddress &&
                          formik.errors.RegisteredAddress
                        }
                        fullWidth
                        size="small"
                        sx={{ width: "100%", mt: 2 }}
                      />
                    </Grid>
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <LocalizationProvider dateAdapter={AdapterDayjs}>
                        <DatePicker
                          size="small"
                          id="DateofIncorporation"
                          name="DateofIncorporation"
                          label="Date of Incorporation (>3 years)"
                          slotProps={{ textField: { size: "small" } }}
                          sx={{ width: "100%" }}
                          inputFormat="DD/MM/YYYY"
                          value={
                            formik.values.DateofIncorporation
                              ? dayjs(formik.values.DateofIncorporation)
                              : null
                          }
                          onChange={(value) => {
                            formik.setFieldValue(
                              "DateofIncorporation",
                              value ? value.format("YYYY-MM-DD") : ""
                            );
                          }}
                          renderInput={(params) => (
                            <TextField
                              margin="0"
                              size="small"
                              {...params}
                              sx={{ width: "100%", mt: 2 }}
                            />
                          )}
                        />
                      </LocalizationProvider>
                    </Grid>
                    <Grid size={{ xs: 12, sm: 4 }}>
                      <Grid item xs={12} sm={6}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                        >
                          {uploadedFiles.certificateOfIncorporation
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "certificateOfIncorporation",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(
                            uploadedFiles.certificateOfIncorporation
                          )}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Grid>
                </Box>
              )}

              {(orgTypeId === 1 || orgTypeId === 2) && (
                <>
                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h6"
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        fontWeight: 600,
                      }}
                    >
                      <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                      Udyog Aadhaar Details
                    </Typography>

                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Udyog Certificate Number"
                          name="UdyogCertificateNumber"
                          value={formik.values.UdyogCertificateNumber}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.UdyogCertificateNumber &&
                            Boolean(formik.errors.UdyogCertificateNumber)
                          }
                          helperText={
                            formik.touched.UdyogCertificateNumber &&
                            formik.errors.UdyogCertificateNumber
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Autocomplete
                          size="small"
                          options={enterpriseType}
                          getOptionLabel={(option) => option.label}
                          value={formik.values.TypeofEnterprise}
                          onChange={(e, newValue) => {
                            formik.setFieldValue("TypeofEnterprise", newValue);
                          }}
                          fullWidth
                          renderInput={(params) => (
                            <TextField
                              sx={{ width: "100%", mt: 2 }}
                              {...params}
                              label="Type of Enterprise"
                              variant="outlined"
                              error={
                                formik.touched.TypeofEnterprise &&
                                Boolean(formik.errors.TypeofEnterprise)
                              }
                              helperText={
                                formik.touched.TypeofEnterprise &&
                                formik.errors.TypeofEnterprise
                              }
                            />
                          )}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <LocalizationProvider dateAdapter={AdapterDayjs}>
                          <DatePicker
                            size="small"
                            id="DateofRegistration"
                            name="DateofRegistration"
                            label="Date of Registration (>3 years)"
                            slotProps={{ textField: { size: "small" } }}
                            sx={{ width: "100%" }}
                            inputFormat="DD/MM/YYYY"
                            value={
                              formik.values.DateofRegistration
                                ? dayjs(formik.values.DateofRegistration)
                                : null
                            }
                            onChange={(value) => {
                              formik.setFieldValue(
                                "DateofRegistration",
                                value ? value.format("YYYY-MM-DD") : ""
                              );
                            }}
                            renderInput={(params) => (
                              <TextField
                                margin="0"
                                size="small"
                                {...params}
                                sx={{ width: "100%", mt: 2 }}
                              />
                            )}
                          />
                        </LocalizationProvider>
                      </Grid>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <Grid item xs={12} sm={6}>
                          <Button
                            variant="outlined"
                            component="label"
                            fullWidth
                            size="small"
                          >
                            {uploadedFiles.udyogAadhaarCertificate
                              ? "Change File"
                              : "Choose File"}
                            <input
                              type="file"
                              accept="application/pdf"
                              hidden
                              onChange={(e) =>
                                handleFileUpload(
                                  "udyogAadhaarCertificate",
                                  e.target.files[0]
                                )
                              }
                            />
                          </Button>
                          <Typography variant="body2" sx={{ mt: 1 }}>
                            {renderFileLink(
                              uploadedFiles.udyogAadhaarCertificate
                            )}
                          </Typography>
                        </Grid>
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h6"
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        fontWeight: 600,
                      }}
                    >
                      <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                      EPF Registration Details
                    </Typography>

                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <TextField
                          label="EPF Number"
                          name="epfNumber"
                          value={formik.values.epfNumber}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.epfNumber &&
                            Boolean(formik.errors.epfNumber)
                          }
                          helperText={
                            formik.touched.epfNumber && formik.errors.epfNumber
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <TextField
                          label="Registered Authority"
                          name="RegisteredAuthority"
                          value={formik.values.RegisteredAuthority}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.RegisteredAuthority &&
                            Boolean(formik.errors.RegisteredAuthority)
                          }
                          helperText={
                            formik.touched.RegisteredAuthority &&
                            formik.errors.RegisteredAuthority
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 4 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.epfCertificate
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "epfCertificate",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.epfCertificate)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h6"
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        fontWeight: 600,
                      }}
                    >
                      <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                      ESIC Details
                    </Typography>

                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <TextField
                          label="ESIC Number"
                          name="esicNumber"
                          value={formik.values.esicNumber}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.esicNumber &&
                            Boolean(formik.errors.esicNumber)
                          }
                          helperText={
                            formik.touched.esicNumber &&
                            formik.errors.esicNumber
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>
                      <Grid size={{ xs: 12, sm: 4 }}>
                        <TextField
                          label="ESIC State/Authority"
                          name="esicAuthority"
                          value={formik.values.esicAuthority}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.esicAuthority &&
                            Boolean(formik.errors.esicAuthority)
                          }
                          helperText={
                            formik.touched.esicAuthority &&
                            formik.errors.esicAuthority
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 4 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.esicCertificate
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "esicCertificate",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.esicCertificate)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h6"
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        fontWeight: 600,
                      }}
                    >
                      <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                      Turnover
                    </Typography>

                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Turnover (FY-2024-25)"
                          name="TurnoverFY_2024_25"
                          value={formik.values.TurnoverFY_2024_25}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.TurnoverFY_2024_25 &&
                            Boolean(formik.errors.TurnoverFY_2024_25)
                          }
                          helperText={
                            formik.touched.TurnoverFY_2024_25 &&
                            formik.errors.TurnoverFY_2024_25
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.turnoverDocumentsFy1
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "turnoverDocumentsFy1",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.turnoverDocumentsFy1)}
                        </Typography>
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Turnover (FY-2023-24)"
                          name="TurnoverFY_2023_24"
                          value={formik.values.TurnoverFY_2023_24}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.TurnoverFY_2023_24 &&
                            Boolean(formik.errors.TurnoverFY_2023_24)
                          }
                          helperText={
                            formik.touched.TurnoverFY_2023_24 &&
                            formik.errors.TurnoverFY_2023_24
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.turnoverDocumentsFy2
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "turnoverDocumentsFy2",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.turnoverDocumentsFy2)}
                        </Typography>
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Turnover (FY-2022-23)"
                          name="TurnoverFY_2022_23"
                          value={formik.values.TurnoverFY_2022_23}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.TurnoverFY_2022_23 &&
                            Boolean(formik.errors.TurnoverFY_2022_23)
                          }
                          helperText={
                            formik.touched.TurnoverFY_2022_23 &&
                            formik.errors.TurnoverFY_2022_23
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                          sx={{ width: "100%", mt: 2 }}
                        >
                          {uploadedFiles.turnoverDocumentsFy3
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "turnoverDocumentsFy3",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.turnoverDocumentsFy3)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>
                </>
              )}

              {orgTypeId === 2 && (
                <>
                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h7"
                      sx={{ display: "flex", alignItems: "center" }}
                    >
                      <ContactEmergencyIcon sx={{ mr: 1 }} />
                      Payroll
                    </Typography>
                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="Payroll"
                          name="Payroll"
                          value={formik.values.Payroll}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.Payroll &&
                            Boolean(formik.errors.Payroll)
                          }
                          helperText={
                            formik.touched.Payroll && formik.errors.Payroll
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%" }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                        >
                          {uploadedFiles.payrollDocuments
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "payrollDocuments",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.payrollDocuments)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>

                  <Box sx={{ mt: 4 }}>
                    <Typography
                      variant="h7"
                      sx={{ display: "flex", alignItems: "center" }}
                    >
                      <ContactEmergencyIcon sx={{ mr: 1 }} />
                      PF Return
                    </Typography>
                    <Divider sx={{ mt: 2 }} />
                    <Grid container spacing={2} mb={1}>
                      <Grid size={{ xs: 12, sm: 6 }}>
                        <TextField
                          label="PF Return (Last 3 Months)
"
                          name="PF_Return_Last_3_Months"
                          value={formik.values.PF_Return_Last_3_Months}
                          onChange={formik.handleChange}
                          error={
                            formik.touched.PF_Return_Last_3_Months &&
                            Boolean(formik.errors.PF_Return_Last_3_Months)
                          }
                          helperText={
                            formik.touched.PF_Return_Last_3_Months &&
                            formik.errors.PF_Return_Last_3_Months
                          }
                          fullWidth
                          size="small"
                          sx={{ width: "100%" }}
                        />
                      </Grid>

                      <Grid size={{ xs: 12, sm: 6 }}>
                        <Button
                          variant="outlined"
                          component="label"
                          fullWidth
                          size="small"
                        >
                          {uploadedFiles.pfReturnDocuments
                            ? "Change File"
                            : "Choose File"}
                          <input
                            type="file"
                            accept="application/pdf"
                            hidden
                            onChange={(e) =>
                              handleFileUpload(
                                "pfReturnDocuments",
                                e.target.files[0]
                              )
                            }
                          />
                        </Button>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {renderFileLink(uploadedFiles.pfReturnDocuments)}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Box>
                </>
              )}

              {orgTypeId === 3 && (
                <Box sx={{ mt: 4 }}>
                  <Typography
                    variant="h6"
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      fontWeight: 600,
                    }}
                  >
                    <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                    Consent Letter of Chairperson/Executive of the Respective
                    PSUs
                  </Typography>

                  <Divider sx={{ my: 2 }} />

                  <Grid container spacing={3}>
                    {/* Left side: Download Format */}
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        Consent Letter Format
                      </Typography>
                      <Button
                        variant="outlined"
                        startIcon={<DownloadIcon />}
                        fullWidth
                        size="small"
                      >
                        Download Consent Letter Format
                      </Button>
                    </Grid>

                    {/* Right side: Upload Signed Consent Letter */}
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        Upload Signed Consent Letter
                      </Typography>
                      <Button
                        variant="outlined"
                        component="label"
                        fullWidth
                        size="small"
                      >
                        {uploadedFiles.consentLetterPSU
                          ? "Change File"
                          : "Choose File"}
                        <input
                          type="file"
                          accept="application/pdf"
                          hidden
                          onChange={(e) =>
                            handleFileUpload(
                              "consentLetterPSU",
                              e.target.files[0]
                            )
                          }
                        />
                      </Button>
                      <Typography variant="body2" sx={{ mt: 1 }}>
                        {renderFileLink(uploadedFiles.consentLetterPSU)}
                      </Typography>
                    </Grid>
                  </Grid>
                </Box>
              )}

              {orgTypeId === 4 && (
                <Box sx={{ mt: 4 }}>
                  <Typography
                    variant="h6"
                    sx={{
                      display: "flex",
                      alignItems: "center",
                      fontWeight: 600,
                    }}
                  >
                    <ContactEmergencyIcon color="primary" sx={{ mr: 1 }} />
                    Declaration/Consent letter of the Head of the department
                    (HoD)
                  </Typography>

                  <Divider sx={{ my: 2 }} />

                  <Grid container spacing={3} mb={1}>
                    {/* Left side: Download Format */}
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        Declaration/Consent letter Format
                      </Typography>
                      <Button
                        variant="outlined"
                        startIcon={<DownloadIcon />}
                        fullWidth
                        size="small"
                      >
                        Download Declaration/Consent Format
                      </Button>
                    </Grid>

                    {/* Right side: Upload Signed Consent Letter */}
                    <Grid size={{ xs: 12, sm: 6 }}>
                      <Typography variant="body1" sx={{ mb: 1 }}>
                        Upload Signed Declaration Letter
                      </Typography>
                      <Button
                        variant="outlined"
                        component="label"
                        fullWidth
                        size="small"
                      >
                        {uploadedFiles.declarationHoD
                          ? "Change File"
                          : "Choose File"}
                        <input
                          type="file"
                          accept="application/pdf"
                          hidden
                          onChange={(e) =>
                            handleFileUpload(
                              "declarationHoD",
                              e.target.files[0]
                            )
                          }
                        />
                      </Button>
                      <Typography variant="body2" sx={{ mt: 1 }}>
                        {renderFileLink(uploadedFiles.declarationHoD)}
                      </Typography>
                    </Grid>
                  </Grid>
                </Box>
              )}

              <Box
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  gap: 2,
                  mt: 2,
                }}
              >
                <Button onClick={() => goToBackTab()} variant="contained">
                  Back
                </Button>

                <Button type="submit" variant="contained">
                  Next
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default LegalDocument;





















import React, { useState, useEffect } from "react";
import {
  Box,
  Grid,
  Card,
  CardHeader,
  CardContent,
  Divider,
  TextField,
  Typography,
  Autocomplete,
  Button,
} from "@mui/material";
import PinDropTwoToneIcon from "@mui/icons-material/PinDropTwoTone";
import ContactEmergencyIcon from "@mui/icons-material/ContactEmergency";
import { useFormik } from "formik";
import * as Yup from "yup";
import {
  fetchdivisionsType,
  fetchdistrictType,
  fetchBlockType,
  fetchstateType,
  fetchdivisionType,
} from "../../../services/dropdownService";
import {
  fetchEmployer_Location_ContactDetail,
  update_Employer_Location_ContactDetail,
} from "../../../services/employerlocationandContact";
import { useSnackbar } from "../../../components/Snackbar";

const LocationContact = ({ goToNextTab, goToBackTab, markTabAsCompleted }) => {
  const [stateOptions, setStateOptions] = useState([]);
  const [divisionOptions, setDivisionOptions] = useState([]);
  const [districtOptions, setDistrictOptions] = useState([]);
  const [blockOptions, setBlockOptions] = useState([]);
  const [talukaOptions, setTalukaOptions] = useState([]);
  const { showSnackbar } = useSnackbar();

  const formik = useFormik({
    initialValues: {
      officeAddress: "",
      pincode: "",
      state: null,
      Division: null,
      district: null,
      Block: null,
      otherDivision: "",
      otherDistrict: "",
      otherBlock: "",
      firstName: "",
      middleName: "",
      lastName: "",
      designation: "",
      mobileNo: "",
      officeContactNo: "",
      email: "",
    },

    validationSchema: Yup.object({
      officeAddress: Yup.string().required("Office Address is Required"),
      state: Yup.object().nullable().required("State/UT is required"),

      Division: Yup.mixed()
        .nullable()
        .when("state", {
          is: (state) => state?.id === 5,
          then: (schema) => schema.required("Division is required"),
          otherwise: (schema) => schema.notRequired(),
        }),

      district: Yup.mixed()
        .nullable()
        .when("state", {
          is: (state) => state?.id === 5,
          then: (schema) => schema.required("District is required"),
          otherwise: (schema) => schema.notRequired(),
        }),

      Block: Yup.mixed().nullable(), // Optional in all cases

      otherDivision: Yup.string()
        .nullable()
        .when("state", {
          is: (state) => state?.id !== 5,
          then: (schema) => schema.required("Division is required"),
        }),

      otherDistrict: Yup.string().when("state", {
        is: (state) => state?.id !== 5,
        then: (schema) => schema.required("District is required"),
        otherwise: (schema) => schema.nullable(),
      }),

      otherBlock: Yup.string().nullable(), // Optional

      pincode: Yup.string()
        .matches(/^\d{6}$/, "Pincode must be exactly 6 digits")
        .required("Pincode is Required"),

      firstName: Yup.string()
        .matches(/^[A-Za-z]+$/, "Only alphabetic characters allowed")
        .required("First Name is Required"),

      middleName: Yup.string().matches(
        /^[A-Za-z]*$/,
        "Only alphabetic characters allowed"
      ),

      lastName: Yup.string()
        .matches(/^[A-Za-z]+$/, "Only alphabetic characters allowed")
        .required("Last Name is Required"),

      designation: Yup.string().required("Designation is Required"),

      officeContactNo: Yup.string()
        .matches(/^\d{10}$/, "Office Contact Number must be exactly 10 digits")
        .required("Office Contact Number is Required"),
    }),

    onSubmit: async (values) => {
      const isBihar = values.state?.id === 5;
      const payload = {
        locationDetails: {
          officeAddress: values.officeAddress,
          stateId: values.state?.id ?? null,

          divisionId: isBihar ? values.Division?.id ?? null : null,
          districtId: isBihar ? values.district?.id ?? null : null,
          blockId: isBihar ? values.Block?.id ?? null : null,

          otherDivision: !isBihar ? values.otherDivision : null,
          otherDistrict: !isBihar ? values.otherDistrict : null,
          otherBlock: !isBihar ? values.otherBlock : null,
          pincode: values.pincode,
        },
        contactDetails: {
          firstName: values.firstName,
          middleName: values.middleName,
          lastName: values.lastName,
          designation: values.designation,
          mobileNo: values.mobileNo,
          officeContactNo: values.officeContactNo,
          email: values.email,
        },
      };
      try {
        const response = await update_Employer_Location_ContactDetail(payload);
        showSnackbar(response.message || "Form submitted successfully");
        markTabAsCompleted();
        goToNextTab();
      } catch (error) {
        console.log(error);
        showSnackbar(
          `Error: ${error.response?.data?.message || error.message}`,
          "error"
        );
      }
    },
    validateOnChange: true,
    validateOnBlur: true,
    enableReinitialize: true,
  });

  // Load all dropdowns and initial values in a single effect
  useEffect(() => {
    const loadDivisionDropdown = async () => {
      try {
        const data = await fetchdivisionsType();
        setDivisionOptions(data);
      } catch (err) {
        console.error("Failed to fetch division dropdown", err);
      }
    };

    const loadStateList = async () => {
      try {
        const data = await fetchstateType();
        setStateOptions(data);
      } catch (err) {
        console.error("Failed to fetch organization dropdown", err);
      }
    };

    // Main effect for loading and setting dependent dropdowns and values
    const loadEmployer_location_ContactDetails = async () => {
      try {
        const data = await fetchEmployer_Location_ContactDetail();
        if (data?.locationDetails && data?.contactDetails) {
          const loc = data.locationDetails;
          const contact = data.contactDetails;
          const state = loc?.state || null;
          const isBihar = state?.id === 5;

          let _divisionOptions = [];
          let selectedDivision = null;
          let _districtOptions = [];
          let selectedDistrict = null;
          let _blockOptions = [];
          let selectedBlock = null;

          if (isBihar) {
            // Division
            const divisionRes = await fetchdivisionType(state.id);
            _divisionOptions = divisionRes.result || [];
            selectedDivision = _divisionOptions.find((d) => d.id === loc.division?.id) || null;

            // District
            if (selectedDivision) {
              const districtRes = await fetchdistrictType(selectedDivision.id);
              _districtOptions = districtRes.result || [];
              selectedDistrict = _districtOptions.find((d) => d.id === loc.district?.id) || null;

              // Block
              if (selectedDistrict) {
                const blockRes = await fetchBlockType(selectedDistrict.id);
                _blockOptions = blockRes.result || [];
                selectedBlock = _blockOptions.find((b) => b.id === loc.block?.id) || null;
              }
            }
          }

          setDivisionOptions(_divisionOptions);
          setDistrictOptions(_districtOptions);
          setBlockOptions(_blockOptions);

          // Set all initial values at once
          formik.setValues({
            officeAddress: loc.officeAddress || "",
            pincode: loc.pincode || "",
            state: state,
            Division: selectedDivision,
            district: selectedDistrict,
            Block: selectedBlock,
            otherDivision: !isBihar ? loc.otherDivision ?? "" : "",
            otherDistrict: !isBihar ? loc.otherDistrict ?? "" : "",
            otherBlock: !isBihar ? loc.otherBlock ?? "" : "",
            firstName: contact.firstName || "",
            middleName: contact.middleName || "",
            lastName: contact.lastName || "",
            designation: contact.designation || "",
            mobileNo: contact.mobileNo || "",
            officeContactNo: contact.officeContactNo || "",
            email: contact.email || "",
          });
        }
      } catch (err) {
        console.error("Failed to fetch location/contact details", err);
      }
    };

    loadDivisionDropdown();
    loadStateList();
    loadEmployer_location_ContactDetails();
  }, []);

  // Only reload dependent dropdowns if user changes state/division/district manually
  useEffect(() => {
    // Only reload if not set by initial data load
    if (formik.values.state && !formik.values.Division && formik.values.state.id === 5) {
      const loadDivision = async () => {
        try {
          const data = await fetchdivisionType(formik.values.state.id);
          setDivisionOptions(data.result || []);
          setDistrictOptions([]);
          formik.setFieldValue("district", null);
        } catch (err) {
          setDivisionOptions([]);
        }
      };
      loadDivision();
    }
    // For non-Bihar states, clear division/district/block dropdowns
    if (formik.values.state && formik.values.state.id !== 5) {
      setDivisionOptions([]);
      setDistrictOptions([]);
      setBlockOptions([]);
      formik.setFieldValue("Division", null);
      formik.setFieldValue("district", null);
      formik.setFieldValue("Block", null);
    }
  }, [formik.values.state]);

  useEffect(() => {
    if (formik.values.Division && !formik.values.district) {
      const loadDistricts = async () => {
        try {
          const data = await fetchdistrictType(formik.values.Division.id);
          setDistrictOptions(data.result || []);
          setBlockOptions([]);
          formik.setFieldValue("Block", null);
        } catch (error) {
          setDistrictOptions([]);
        }
      };
      loadDistricts();
    }
  }, [formik.values.Division]);

  useEffect(() => {
    if (formik.values.district && !formik.values.Block) {
      const loadBlocks = async () => {
        try {
          const data = await fetchBlockType(formik.values.district.id);
          setBlockOptions(data.result || []);
        } catch (error) {
          setBlockOptions([]);
        }
      };
      loadBlocks();
    }
  }, [formik.values.district]);

  return (
    <Box component="form" onSubmit={formik.handleSubmit}>
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Card sx={{ border: "1px solid #ccc", borderRadius: 2 }}>
            <CardHeader
              title={
                <Typography
                  variant="h7"
                  sx={{ display: "flex", alignItems: "center" }}
                >
                  <PinDropTwoToneIcon sx={{ mr: 1 }} />
                  Organisation Registered Office Address
                </Typography>
              }
            />
            <Divider />
            <CardContent>
              <Grid container spacing={2}>
                <Grid size={{ xs: 12, sm: 12 }}>
                  <TextField
                    required
                    size="small"
                    fullWidth
                    id="officeAddress"
                    name="officeAddress"
                    label="Organisation Registered Office Address"
                    multiline
                    rows={4}
                    value={formik.values.officeAddress}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    error={
                      formik.touched.officeAddress &&
                      Boolean(formik.errors.officeAddress)
                    }
                    helperText={
                      formik.touched.officeAddress &&
                      formik.errors.officeAddress
                    }
                  />
                </Grid>
                <Grid size={{ xs: 12, sm: 4 }}>
                  <Autocomplete
                    size="small"
                    required
                    options={stateOptions}
                    getOptionLabel={(option) => option.label}
                    value={formik.values.state}
                    onChange={(e, newValue) =>
                      formik.setFieldValue("state", newValue)
                    }
                    fullWidth
                    renderInput={(params) => (
                      <TextField
                        sx={{ width: "100%", mt: 2 }}
                        {...params}
                        label="State"
                        variant="outlined"
                        error={
                          formik.touched.state && Boolean(formik.errors.state)
                        }
                        helperText={formik.touched.state && formik.errors.state}
                      />
                    )}
                  />
                </Grid>
                {formik?.values?.state?.id === 5 ? (
                  <>
                    {/* Division Dropdown */}
                    <Grid size={{ xs: 12, sm: 4 }}>
                      <Autocomplete
                        size="small"
                        required
                        options={divisionOptions}
                        getOptionLabel={(option) => option.label}
                        value={formik.values.Division}
                        onChange={(e, newValue) =>
                          formik.setFieldValue("Division", newValue)
                        }
                        fullWidth
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            sx={{ width: "100%", mt: 2 }}
                            label="Division"
                            variant="outlined"
                            error={
                              formik.touched.Division &&
                              Boolean(formik.errors.Division)
                            }
                            helperText={
                              formik.touched.Division && formik.errors.Division
                            }
                          />
                        )}
                      />
                    </Grid>

                    {/* District Dropdown */}
                    <Grid size={{ xs: 12, sm: 4 }}>
                      <Autocomplete
                        size="small"
                        required
                        options={districtOptions}
                        getOptionLabel={(option) => option.label}
                        value={formik.values.district}
                        onChange={(e, newValue) =>
                          formik.setFieldValue("district", newValue)
                        }
                        fullWidth
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            sx={{ width: "100%", mt: 2 }}
                            label="District"
                            variant="outlined"
                            error={
                              formik.touched.district &&
                              Boolean(formik.errors.district)
                            }
                            helperText={
                              formik.touched.district && formik.errors.district
                            }
                          />
                        )}
                      />
                    </Grid>

                    {/* Block Dropdown */}
                    <Grid size={{ xs: 12, sm: 4 }}>
                      <Autocomplete
                        size="small"
                        options={blockOptions}
                        getOptionLabel={(option) => option.label}
                        value={formik.values.Block}
                        onChange={(e, newValue) =>
                          formik.setFieldValue("Block", newValue)
                        }
                        fullWidth
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            sx={{ width: "100%", mt: 2 }}
                            label="Block"
                            variant="outlined"
                            error={
                              formik.touched.Block &&
                              Boolean(formik.errors.Block)
                            }
                            helperText={
                              formik.touched.Block && formik.errors.Block
                            }
                          />
                        )}
                      />
                    </Grid>
                  </>
                ) : (
                  <>
                    {/* Other Division TextField */}
                    <Grid size={{ xs: 12, sm: 4 }}>
                      <TextField
                        size="small"
                        fullWidth
                        required
                        id="otherDivision"
                        name="otherDivision"
                        label="Division"
                        sx={{ width: "100%", mt: 2 }}
                        value={formik.values.otherDivision}
                        onChange={formik.handleChange}
                        error={
                          formik.touched.otherDivision &&
                          Boolean(formik.errors.otherDivision)
                        }
                        helperText={
                          formik.touched.otherDivision &&
                          formik.errors.otherDivision
                        }
                      />
                    </Grid>

                    {/* Other District TextField */}
                    <Grid size={{ xs: 12, sm: 4 }}>
                      <TextField
                        size="small"
                        fullWidth
                        required
                        id="otherDistrict"
                        name="otherDistrict"
                        label="District"
                        sx={{ width: "100%", mt: 2 }}
                        value={formik.values.otherDistrict}
                        onChange={formik.handleChange}
                        error={
                          formik.touched.otherDistrict &&
                          Boolean(formik.errors.otherDistrict)
                        }
                        helperText={
                          formik.touched.otherDistrict &&
                          formik.errors.otherDistrict
                        }
                      />
                    </Grid>

                    {/* Other Block TextField */}
                    <Grid size={{ xs: 12, sm: 4 }}>
                      <TextField
                        size="small"
                        fullWidth
                        id="otherBlock"
                        name="otherBlock"
                        label="Block"
                        sx={{ width: "100%", mt: 2 }}
                        value={formik.values.otherBlock}
                        onChange={formik.handleChange}
                        error={
                          formik.touched.otherBlock &&
                          Boolean(formik.errors.otherBlock)
                        }
                        helperText={
                          formik.touched.otherBlock && formik.errors.otherBlock
                        }
                      />
                    </Grid>
                  </>
                )}
                <Grid size={{ xs: 12, sm: 4 }}>
                  <TextField
                    required
                    label="Pincode"
                    name="pincode"
                    value={formik.values.pincode}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    error={
                      formik.touched.pincode && Boolean(formik.errors.pincode)
                    }
                    helperText={formik.touched.pincode && formik.errors.pincode}
                    fullWidth
                    size="small"
                    sx={{ width: "100%", mt: 2 }}
                  />
                </Grid>
              </Grid>
              <Box sx={{ mt: 8 }}>
                <Typography
                  variant="h7"
                  sx={{ display: "flex", alignItems: "center" }}
                >
                  <ContactEmergencyIcon sx={{ mr: 1 }} />
                  Contact Information
                </Typography>
                <Divider sx={{ mt: 2 }} />
                <Grid container spacing={2} mb={1}>
                  <Grid size={{ xs: 12, sm: 4 }}>
                    <TextField
                      required
                      size="small"
                      fullWidth
                      id="firstName"
                      name="firstName"
                      label="First Name"
                      value={formik.values.firstName}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.firstName &&
                        Boolean(formik.errors.firstName)
                      }
                      helperText={
                        formik.touched.firstName && formik.errors.firstName
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid size={{ xs: 12, sm: 4 }}>
                    <TextField
                      size="small"
                      fullWidth
                      id="middleName"
                      name="middleName"
                      label="Middle Name"
                      value={formik.values.middleName}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.middleName &&
                        Boolean(formik.errors.middleName)
                      }
                      helperText={
                        formik.touched.middleName && formik.errors.middleName
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid size={{ xs: 12, sm: 4 }}>
                    <TextField
                      required
                      size="small"
                      fullWidth
                      id="lastName"
                      name="lastName"
                      label="Last Name"
                      value={formik.values.lastName}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.lastName &&
                        Boolean(formik.errors.lastName)
                      }
                      helperText={
                        formik.touched.lastName && formik.errors.lastName
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid size={{ xs: 12, sm: 4 }}>
                    <TextField
                      required
                      size="small"
                      fullWidth
                      id="designation"
                      name="designation"
                      label="Designation"
                      value={formik.values.designation}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.designation &&
                        Boolean(formik.errors.designation)
                      }
                      helperText={
                        formik.touched.designation && formik.errors.designation
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid size={{ xs: 12, sm: 4 }}>
                    <TextField
                      size="small"
                      fullWidth
                      id="mobileNo"
                      name="mobileNo"
                      label="Mobile Number"
                      value={formik.values.mobileNo}
                      onChange={formik.handleChange}
                      InputProps={{
                        readOnly: true, // keep it readOnly instead of disabled
                      }}
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid size={{ xs: 12, sm: 4 }}>
                    <TextField
                      required
                      size="small"
                      fullWidth
                      id="officeContactNo"
                      name="officeContactNo"
                      label="Office Contact Number"
                      value={formik.values.officeContactNo}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.officeContactNo &&
                        Boolean(formik.errors.officeContactNo)
                      }
                      helperText={
                        formik.touched.officeContactNo &&
                        formik.errors.officeContactNo
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid size={{ xs: 12, sm: 4 }}>
                    <TextField
                      size="small"
                      fullWidth
                      id="email"
                      name="email"
                      label="Email Id"
                      value={formik.values.email}
                      onChange={formik.handleChange}
                      InputProps={{
                        readOnly: true, // keep it readOnly instead of disabled
                      }}
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                </Grid>
              </Box>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  gap: 2,
                  mt: 2,
                }}
              >
                <Button onClick={() => goToBackTab()} variant="contained">
                  Back
                </Button>
                <Button type="submit" variant="contained">
                  Next
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default LocationContact;
