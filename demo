<Grid size={{ xs: 12, sm: 4 }}>
  <Autocomplete
    size="small"
    required
    options={districtOptions}
    getOptionLabel={(option) => option.label}
    value={formik.values.otherDistrict}
    onChange={(e, newValue) =>
      formik.setFieldValue("otherDistrict", newValue)
    }
    fullWidth
    renderInput={(params) => (
      <TextField
        {...params}
        sx={{ width: "100%", mt: 2 }}
        label="District"
        variant="outlined"
        error={formik.touched.otherDistrict && Boolean(formik.errors.otherDistrict)}
        helperText={formik.touched.otherDistrict && formik.errors.otherDistrict}
      />
    )}
  />
</Grid>




useEffect(() => {
  if (formik.values.state && formik.values.state.id !== 5) {
    const loadOtherDistricts = async () => {
      try {
        const data = await fetchotherdistrictType(formik.values.state.id);
        setDistrictOptions(data.result || []);
      } catch (error) {
        setDistrictOptions([]);
      }
    };
    loadOtherDistricts();
    setBlockOptions([]);
    formik.setFieldValue("otherDistrict", null);
    formik.setFieldValue("otherBlock", "");
  }
}, [formik.values.state]);


const payload = {
  locationDetails: {
    officeAddress: values.officeAddress,
    stateId: values.state?.id ?? null,
    divisionId: null,
    districtId: null,
    blockId: null,
    otherDivision: null,
    otherDistrict: values.otherDistrict?.id ?? null,
    otherBlock: values.otherBlock || null,
    pincode: values.pincode,
  },
  contactDetails: { ... }
};


