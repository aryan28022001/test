import React, { useState, useEffect, useRef } from "react";
import {
  Box,
  Grid,
  Card,
  CardHeader,
  CardContent,
  Divider,
  TextField,
  Typography,
  Autocomplete,
  Button,
} from "@mui/material";
import PinDropTwoToneIcon from "@mui/icons-material/PinDropTwoTone";
import ContactEmergencyIcon from "@mui/icons-material/ContactEmergency";
import { useFormik } from "formik";
import * as Yup from "yup";
import {
  fetchdivisionsType,
  fetchdistrictType,
  fetchBlockType,
  fetchstateType,
  fetchdivisionType,
  fetchotherdistrictType,
} from "../../../services/dropdownService";
import {
  fetchEmployer_Location_ContactDetail,
  update_Employer_Location_ContactDetail,
} from "../../../services/employerlocationandContact";
import { useSnackbar } from "../../../components/Snackbar";
import SendIcon from "@mui/icons-material/Send";
import { useSelector } from "react-redux";

const LocationContact = ({ goToNextTab, goToBackTab, markTabAsCompleted }) => {
  const [stateOptions, setStateOptions] = useState([]);
  const [divisionOptions, setDivisionOptions] = useState([]);
  const [districtOptions, setDistrictOptions] = useState([]);
  const [blockOptions, setBlockOptions] = useState([]);
  const { showSnackbar } = useSnackbar();
  const { userInfo } = useSelector((state) => state.auth);

  // Ref to store loaded (API) values for comparison
  const loadedValues = useRef({});

  // Dynamic validation schema
  const getValidationSchema = (values) => {
    const isBihar = values.state?.id === 5;
    return Yup.object({
      officeAddress: Yup.string().required("Office Address is Required"),
      state: Yup.object().nullable().required("State/UT is required"),
      Division: isBihar
        ? Yup.mixed().nullable().required("Division is required")
        : Yup.mixed().nullable(),
      district: Yup.mixed().nullable().required("District is required"),
      Block: isBihar
        ? Yup.mixed().nullable()
        : Yup.mixed().nullable(),
      otherBlock: Yup.string().nullable(),
      pincode: Yup.string()
        .matches(/^\d{6}$/, "Pincode must be exactly 6 digits")
        .required("Pincode is Required"),
      firstName: Yup.string()
        .matches(/^[A-Za-z]+$/, "Only alphabetic characters allowed")
        .required("First Name is Required"),
      middleName: Yup.string().matches(
        /^[A-Za-z]*$/,
        "Only alphabetic characters allowed"
      ),
      lastName: Yup.string()
        .matches(/^[A-Za-z]+$/, "Only alphabetic characters allowed")
        .required("Last Name is Required"),
      designation: Yup.string().required("Designation is Required"),
      officeContactNo: Yup.string()
        .matches(/^\d{10}$/, "Office Contact Number must be exactly 10 digits")
        .required("Office Contact Number is Required"),
    });
  };

  // Helper: map API values to dropdown objects
  const findOption = (options, value) => {
    if (!value || !Array.isArray(options)) return null;
    return options.find((opt) => opt.id === value.id) || value;
  };

  const formik = useFormik({
    initialValues: {
      officeAddress: "",
      pincode: "",
      state: null,
      Division: null,
      district: null,
      Block: null,
      otherBlock: "",
      firstName: "",
      middleName: "",
      lastName: "",
      designation: "",
      mobileNo: "",
      officeContactNo: "",
      email: "",
    },
    validationSchema: getValidationSchema({ state: null }),
    validate: (values) => {
      try {
        getValidationSchema(values).validateSync(values, { abortEarly: false });
        return {};
      } catch (err) {
        const errors = {};
        if (err.inner) {
          err.inner.forEach((e) => {
            if (!errors[e.path]) errors[e.path] = e.message;
          });
        }
        return errors;
      }
    },
    onSubmit: async (values) => {
      const isBihar = values.state?.id === 5;
      // Use loadedValues to compare and keep unchanged values
      const payload = {
        locationDetails: {
          officeAddress: values.officeAddress,
          stateId: values.state?.id ?? null,
          divisionId: isBihar ? values.Division?.id ?? null : null,
          districtId: values.district?.id ?? null,
          blockId: isBihar ? values.Block?.id ?? null : null,
          otherBlock: !isBihar ? values.otherBlock : null,
          pincode: values.pincode,
        },
        contactDetails: {
          firstName: values.firstName,
          middleName: values.middleName,
          lastName: values.lastName,
          designation: values.designation,
          mobileNo: values.mobileNo,
          officeContactNo: values.officeContactNo,
          email: values.email,
        },
      };
      try {
        const response = await update_Employer_Location_ContactDetail(payload);
        showSnackbar(response.message || "Form submitted successfully");
        markTabAsCompleted();
        goToNextTab();
      } catch (error) {
        showSnackbar(
          `Error: ${error.response?.data?.message || error.message}`,
          "error"
        );
      }
    },
    validateOnChange: true,
    validateOnBlur: true,
    enableReinitialize: true,
  });

  // Track previous value for state/division/district to only clear on real change
  const prevStateId = useRef();
  const prevDivisionId = useRef();
  const prevDistrictId = useRef();

  // Load all dropdowns and initial values in a single effect
  useEffect(() => {
    const loadData = async () => {
      try {
        // 1. Load state options
        const states = await fetchstateType();
        setStateOptions(states);

        // 2. Load API data
        const apiData = await fetchEmployer_Location_ContactDetail();
        const loc = apiData?.result?.locationDetails || {};
        const contact = apiData?.result?.contactDetails || {};
        loadedValues.current = { loc, contact }; // save for later comparison

        // 3. Prepare dropdowns based on API data
        let _divisionOptions = [];
        let _districtOptions = [];
        let _blockOptions = [];
        let selectedState = findOption(states, loc.state);

        if (selectedState?.id === 5) {
          // Bihar
          const divRes = await fetchdivisionType(selectedState.id);
          _divisionOptions = divRes.result || [];
          let selectedDivision = findOption(_divisionOptions, loc.division);

          if (selectedDivision) {
            const distRes = await fetchdistrictType(selectedDivision.id);
            _districtOptions = distRes.result || [];
            let selectedDistrict = findOption(_districtOptions, loc.district);

            if (selectedDistrict) {
              const blockRes = await fetchBlockType(selectedDistrict.id);
              _blockOptions = blockRes.result || [];
            }
          }
        } else if (selectedState?.id) {
          // Other state
          const distRes = await fetchotherdistrictType(selectedState.id);
          _districtOptions = distRes.result || [];
        }

        setDivisionOptions(_divisionOptions);
        setDistrictOptions(_districtOptions);
        setBlockOptions(_blockOptions);

        // 4. Set initial values
        formik.setValues({
          officeAddress: loc.officeAddress || "",
          pincode: loc.pincode || "",
          state: selectedState,
          Division: findOption(_divisionOptions, loc.division),
          district: findOption(_districtOptions, loc.district),
          Block: findOption(_blockOptions, loc.block),
          otherBlock: loc.otherBlock || "",
          firstName: contact.firstName || "",
          middleName: contact.middleName || "",
          lastName: contact.lastName || "",
          designation: contact.designation || "",
          mobileNo: contact.mobileNo || "",
          officeContactNo: contact.officeContactNo || "",
          email: contact.email || "",
        });
      } catch (err) {
        // handle error
      }
    };
    loadData();
  }, []);

  // State change: only clear children if state actually changes
  useEffect(() => {
    if (
      prevStateId.current !== undefined &&
      prevStateId.current !== formik.values.state?.id
    ) {
      // State changed: clear children, fetch new options
      setDivisionOptions([]);
      setDistrictOptions([]);
      setBlockOptions([]);
      formik.setFieldValue("Division", null);
      formik.setFieldValue("district", null);
      formik.setFieldValue("Block", null);
      formik.setFieldValue("otherBlock", "");
      formik.setFieldValue("pincode", "");

      const state = formik.values.state;
      if (state?.id === 5) {
        // Bihar: fetch divisions
        fetchdivisionType(state.id).then((data) => {
          setDivisionOptions(data.result || []);
        });
      } else if (state?.id) {
        // Other: fetch districts
        fetchotherdistrictType(state.id).then((data) => {
          setDistrictOptions(data.result || []);
        });
      }
    }
    prevStateId.current = formik.values.state?.id;
  }, [formik.values.state?.id]);

  // Division change (Bihar only): clear children if division changes
  useEffect(() => {
    if (
      prevDivisionId.current !== undefined &&
      prevDivisionId.current !== formik.values.Division?.id &&
      formik.values.state?.id === 5
    ) {
      setDistrictOptions([]);
      setBlockOptions([]);
      formik.setFieldValue("district", null);
      formik.setFieldValue("Block", null);
      formik.setFieldValue("pincode", "");

      const division = formik.values.Division;
      if (division?.id) {
        fetchdistrictType(division.id).then((data) => {
          setDistrictOptions(data.result || []);
        });
      }
    }
    prevDivisionId.current = formik.values.Division?.id;
  }, [formik.values.Division?.id, formik.values.state?.id]);

  // District change (Bihar only): clear children if district changes
  useEffect(() => {
    if (
      prevDistrictId.current !== undefined &&
      prevDistrictId.current !== formik.values.district?.id &&
      formik.values.state?.id === 5
    ) {
      setBlockOptions([]);
      formik.setFieldValue("Block", null);
      formik.setFieldValue("pincode", "");

      const district = formik.values.district;
      if (district?.id) {
        fetchBlockType(district.id).then((data) => {
          setBlockOptions(data.result || []);
        });
      }
    }
    prevDistrictId.current = formik.values.district?.id;
  }, [formik.values.district?.id, formik.values.state?.id]);

  // District change (other states): clear block and pincode if district changes
  useEffect(() => {
    if (
      prevDistrictId.current !== undefined &&
      prevDistrictId.current !== formik.values.district?.id &&
      formik.values.state?.id !== 5
    ) {
      formik.setFieldValue("otherBlock", "");
      formik.setFieldValue("pincode", "");
    }
    prevDistrictId.current = formik.values.district?.id;
  }, [formik.values.district?.id, formik.values.state?.id]);

  return (
    <Box component="form" onSubmit={formik.handleSubmit}>
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Card sx={{ border: "1px solid #ccc", borderRadius: 2 }}>
            <CardHeader
              title={
                <Typography
                  variant="h7"
                  sx={{ display: "flex", alignItems: "center" }}
                >
                  <PinDropTwoToneIcon sx={{ mr: 1 }} />
                  Organisation Registered Office Address
                </Typography>
              }
            />
            <Divider />
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <TextField
                    required
                    size="small"
                    fullWidth
                    id="officeAddress"
                    name="officeAddress"
                    label="Organisation Registered Office Address"
                    multiline
                    rows={4}
                    value={formik.values.officeAddress}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    error={
                      formik.touched.officeAddress &&
                      Boolean(formik.errors.officeAddress)
                    }
                    helperText={
                      formik.touched.officeAddress &&
                      formik.errors.officeAddress
                    }
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Autocomplete
                    size="small"
                    required
                    options={stateOptions}
                    getOptionLabel={(option) => option.label}
                    value={formik.values.state}
                    onChange={(e, newValue) =>
                      formik.setFieldValue("state", newValue)
                    }
                    fullWidth
                    renderInput={(params) => (
                      <TextField
                        sx={{ width: "100%", mt: 2 }}
                        {...params}
                        label="State"
                        variant="outlined"
                        error={
                          formik.touched.state && Boolean(formik.errors.state)
                        }
                        helperText={formik.touched.state && formik.errors.state}
                      />
                    )}
                  />
                </Grid>
                {formik?.values?.state?.id === 5 ? (
                  <>
                    {/* Bihar UI */}
                    <Grid item xs={12} sm={4}>
                      <Autocomplete
                        size="small"
                        required
                        options={divisionOptions}
                        getOptionLabel={(option) => option.label}
                        value={formik.values.Division}
                        onChange={(e, newValue) =>
                          formik.setFieldValue("Division", newValue)
                        }
                        fullWidth
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            sx={{ width: "100%", mt: 2 }}
                            label="Division"
                            variant="outlined"
                            error={
                              formik.touched.Division &&
                              Boolean(formik.errors.Division)
                            }
                            helperText={
                              formik.touched.Division && formik.errors.Division
                            }
                          />
                        )}
                      />
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <Autocomplete
                        size="small"
                        required
                        options={districtOptions}
                        getOptionLabel={(option) => option.label}
                        value={formik.values.district}
                        onChange={(e, newValue) =>
                          formik.setFieldValue("district", newValue)
                        }
                        fullWidth
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            sx={{ width: "100%", mt: 2 }}
                            label="District"
                            variant="outlined"
                            error={
                              formik.touched.district &&
                              Boolean(formik.errors.district)
                            }
                            helperText={
                              formik.touched.district && formik.errors.district
                            }
                          />
                        )}
                      />
                    </Grid>
                    <Grid item xs={12} sm={4}>
                      <Autocomplete
                        size="small"
                        options={blockOptions}
                        getOptionLabel={(option) => option.label}
                        value={formik.values.Block}
                        onChange={(e, newValue) =>
                          formik.setFieldValue("Block", newValue)
                        }
                        fullWidth
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            sx={{ width: "100%", mt: 2 }}
                            label="Block"
                            variant="outlined"
                            error={
                              formik.touched.Block &&
                              Boolean(formik.errors.Block)
                            }
                            helperText={
                              formik.touched.Block && formik.errors.Block
                            }
                          />
                        )}
                      />
                    </Grid>
                  </>
                ) : (
                  <>
                    {/* Other State UI */}
                    <Grid item xs={12} sm={4}>
                      <Autocomplete
                        size="small"
                        required
                        options={districtOptions}
                        getOptionLabel={(option) => option.label}
                        value={formik.values.district}
                        onChange={(e, newValue) =>
                          formik.setFieldValue("district", newValue)
                        }
                        fullWidth
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            sx={{ width: "100%", mt: 2 }}
                            label="District"
                            variant="outlined"
                            error={
                              formik.touched.district &&
                              Boolean(formik.errors.district)
                            }
                            helperText={
                              formik.touched.district && formik.errors.district
                            }
                          />
                        )}
                      />
                    </Grid>
                    {/* Block TextField (optional) */}
                    <Grid item xs={12} sm={4}>
                      <TextField
                        size="small"
                        fullWidth
                        id="otherBlock"
                        name="otherBlock"
                        label="Block"
                        sx={{ width: "100%", mt: 2 }}
                        value={formik.values.otherBlock}
                        onChange={formik.handleChange}
                        error={
                          formik.touched.otherBlock &&
                          Boolean(formik.errors.otherBlock)
                        }
                        helperText={
                          formik.touched.otherBlock && formik.errors.otherBlock
                        }
                      />
                    </Grid>
                  </>
                )}
                <Grid item xs={12} sm={4}>
                  <TextField
                    required
                    label="Pincode"
                    name="pincode"
                    value={formik.values.pincode}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    error={
                      formik.touched.pincode && Boolean(formik.errors.pincode)
                    }
                    helperText={formik.touched.pincode && formik.errors.pincode}
                    fullWidth
                    size="small"
                    sx={{ width: "100%", mt: 2 }}
                  />
                </Grid>
              </Grid>
              <Box sx={{ mt: 8 }}>
                <Typography
                  variant="h7"
                  sx={{ display: "flex", alignItems: "center" }}
                >
                  <ContactEmergencyIcon sx={{ mr: 1 }} />
                  Contact Information
                </Typography>
                <Divider sx={{ mt: 2 }} />
                <Grid container spacing={2} mb={1}>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      required
                      size="small"
                      fullWidth
                      id="firstName"
                      name="firstName"
                      label="First Name"
                      value={formik.values.firstName}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.firstName &&
                        Boolean(formik.errors.firstName)
                      }
                      helperText={
                        formik.touched.firstName && formik.errors.firstName
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      size="small"
                      fullWidth
                      id="middleName"
                      name="middleName"
                      label="Middle Name"
                      value={formik.values.middleName}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.middleName &&
                        Boolean(formik.errors.middleName)
                      }
                      helperText={
                        formik.touched.middleName && formik.errors.middleName
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      required
                      size="small"
                      fullWidth
                      id="lastName"
                      name="lastName"
                      label="Last Name"
                      value={formik.values.lastName}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.lastName &&
                        Boolean(formik.errors.lastName)
                      }
                      helperText={
                        formik.touched.lastName && formik.errors.lastName
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      required
                      size="small"
                      fullWidth
                      id="designation"
                      name="designation"
                      label="Designation"
                      value={formik.values.designation}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.designation &&
                        Boolean(formik.errors.designation)
                      }
                      helperText={
                        formik.touched.designation && formik.errors.designation
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      size="small"
                      fullWidth
                      id="mobileNo"
                      name="mobileNo"
                      label="Mobile Number"
                      value={formik.values.mobileNo}
                      onChange={formik.handleChange}
                      InputProps={{
                        readOnly: true,
                      }}
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      required
                      size="small"
                      fullWidth
                      id="officeContactNo"
                      name="officeContactNo"
                      label="Office Contact Number"
                      value={formik.values.officeContactNo}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.officeContactNo &&
                        Boolean(formik.errors.officeContactNo)
                      }
                      helperText={
                        formik.touched.officeContactNo &&
                        formik.errors.officeContactNo
                      }
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <TextField
                      size="small"
                      fullWidth
                      id="email"
                      name="email"
                      label="Email Id"
                      value={formik.values.email}
                      onChange={formik.handleChange}
                      InputProps={{
                        readOnly: true,
                      }}
                      sx={{ width: "100%", mt: 2 }}
                    />
                  </Grid>
                </Grid>
              </Box>
              <Box sx={{ textAlign: "center", mt: 2 }}>
                {userInfo?.userDetails?.isAllowedToSubmit && (
                  <Box sx={{ display: "flex", justifyContent: "center", gap: 2 }}>
                    <Button
                      onClick={() => goToBackTab()}
                      variant="contained"
                      startIcon={<SendIcon sx={{ transform: "scaleX(-1)" }} />}
                    >
                      Back
                    </Button>
                    <Button
                      type="submit"
                      variant="contained"
                      endIcon={<SendIcon />}
                    >
                      Save & Next
                    </Button>
                  </Box>
                )}
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default LocationContact;
